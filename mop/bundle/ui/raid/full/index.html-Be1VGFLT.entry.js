import{e,f as t,S as a,R as s,P as i,C as r,F as n,E as l,a as o,I as c,U as d,b as h,r as p,t as m,G as u,c as g,d as f,i as y}from"../../../localization-kgGUpfrJ.chunk.js";import{R as P,T as S,a as I,m as E,r as b,b as D,c as k,p as C,d as v,e as w,f as T,g as R,h as U,P as x,i as A,C as L,j as O,k as F,l as B,n as N,o as H,A as M,H as j,s as W,t as $,S as V,B as K,I as J,q as z,u as q,v as G,w as _,x as Q,y as X,z as Z,E as Y}from"../../../detailed_results-BEc8O_jh.chunk.js";import{E as ee,I as te,g as ae,a as se,M as ie,P as re,b as ne,c as le,B as oe,d as ce,e as de,f as he,C as pe,h as me,i as ue,j as ge,S as fe,p as ye}from"../../../preset_utils-Cz_ySDGC.chunk.js";import{B as Pe}from"../../../sim-m2MkeVsc.chunk.js";import{F as Se}from"../../../sim-D9k16ZRJ.chunk.js";import{U as Ie}from"../../../sim-C48QI3gJ.chunk.js";import{B as Ee}from"../../../sim-dLtLdzQW.chunk.js";import{F as be}from"../../../sim-D0eft-BZ.chunk.js";import{G as De}from"../../../sim-CTlnGrNc.chunk.js";import{R as ke}from"../../../sim-KtIgd6-m.chunk.js";import{B as Ce}from"../../../sim-Cb1yPMgt.chunk.js";import{M as ve}from"../../../sim-BG0jHoRG.chunk.js";import{S as we}from"../../../sim-Bin-o5s7.chunk.js";import{A as Te}from"../../../sim-Cb9D3GRt.chunk.js";import{F as Re}from"../../../sim-E9FvnTKN.chunk.js";import{F as Ue}from"../../../sim-C2XdtXC2.chunk.js";import{H as xe}from"../../../sim-B3Jo8zP2.chunk.js";import{P as Ae}from"../../../sim-v0bshhiu.chunk.js";import{R as Le}from"../../../sim-BE23j3BF.chunk.js";import{D as Oe}from"../../../sim-DrevZyzu.chunk.js";import{H as Fe}from"../../../sim-B7dWeq6C.chunk.js";import{S as Be}from"../../../sim-DYBurbF4.chunk.js";import{A as Ne}from"../../../sim-Bb1D3D5B.chunk.js";import{C as He}from"../../../sim-Dss6KArv.chunk.js";import{S as Me}from"../../../sim-Crnrci1r.chunk.js";import{E as je}from"../../../sim-_yva9vqQ.chunk.js";import{E as We}from"../../../sim-DRyjgyFG.chunk.js";import{R as $e}from"../../../sim-Di0j2ZX3.chunk.js";import{A as Ve}from"../../../sim-CFNhQXQ3.chunk.js";import{D as Ke}from"../../../sim-CbxkfSj5.chunk.js";import{D as Je}from"../../../sim-BcNQMrCn.chunk.js";import{A as ze}from"../../../sim-BsooUNyO.chunk.js";import{F as qe}from"../../../sim-CBNhX4Wf.chunk.js";import{P as Ge}from"../../../sim-N7IIX7CT.chunk.js";import"../../../suggest_reforges_action-pxTJ5qRK.chunk.js";import"../../../inputs-C5pGZLh4.chunk.js";import"../../../preraid_celestial.gear-B6UF0IKN.chunk.js";import"../../../inputs-B4xRDEmm.chunk.js";import"../../../inputs-DnUpiPCX.chunk.js";import"../../../inputs-CyiQivWf.chunk.js";import"../../../inputs-CmrE3lgu.chunk.js";import"../../../inputs-Xycf6pdg.chunk.js";import"../../../presets-CN9gC92l.chunk.js";import"../../../inputs-Cft2e158.chunk.js";class _e extends ee{constructor(e,t,a){super(e,a),this.simUI=t}}class Qe extends _e{constructor(e,t){super(e,t,{title:"JSON Export",allowDownload:!0})}getData(){return JSON.stringify(P.toJson(this.simUI.toProto()),null,2)}}class Xe extends te{constructor(e,t,a){super(e,a),this.simUI=t}}class Ze extends Xe{constructor(a,s){super(a,s,{title:"JSON Import",allowFileUpload:!0}),this.descriptionElem.appendChild(e(t,null,e("p",null,"Import settings from a JSON text file, which can be created using the JSON Export feature of this site."),e("p",null,"To import, paste the JSON text below and click, 'Import'.")))}async onImport(e){const t=P.fromJsonString(e,{ignoreUnknownFields:!0});this.simUI.fromProto(S.nextEventID(),t),this.close()}}const Ye={[a.SpecBloodDeathKnight]:(e,t)=>new Pe(e,t),[a.SpecFrostDeathKnight]:(e,t)=>new Se(e,t),[a.SpecUnholyDeathKnight]:(e,t)=>new Ie(e,t),[a.SpecBalanceDruid]:(e,t)=>new Ee(e,t),[a.SpecFeralDruid]:(e,t)=>new be(e,t),[a.SpecRestorationDruid]:(e,t)=>new ke(e,t),[a.SpecGuardianDruid]:(e,t)=>new De(e,t),[a.SpecBeastMasteryHunter]:(e,t)=>new Ce(e,t),[a.SpecMarksmanshipHunter]:(e,t)=>new ve(e,t),[a.SpecSurvivalHunter]:(e,t)=>new we(e,t),[a.SpecArcaneMage]:(e,t)=>new Te(e,t),[a.SpecFireMage]:(e,t)=>new Re(e,t),[a.SpecFrostMage]:(e,t)=>new Ue(e,t),[a.SpecHolyPaladin]:(e,t)=>new xe(e,t),[a.SpecProtectionPaladin]:(e,t)=>new Ae(e,t),[a.SpecRetributionPaladin]:(e,t)=>new Le(e,t),[a.SpecDisciplinePriest]:(e,t)=>new Oe(e,t),[a.SpecHolyPriest]:(e,t)=>new Fe(e,t),[a.SpecShadowPriest]:(e,t)=>new Be(e,t),[a.SpecAssassinationRogue]:(e,t)=>new Ne(e,t),[a.SpecCombatRogue]:(e,t)=>new He(e,t),[a.SpecSubtletyRogue]:(e,t)=>new Me(e,t),[a.SpecElementalShaman]:(e,t)=>new je(e,t),[a.SpecEnhancementShaman]:(e,t)=>new We(e,t),[a.SpecRestorationShaman]:(e,t)=>new $e(e,t),[a.SpecAfflictionWarlock]:(e,t)=>new Ve(e,t),[a.SpecDemonologyWarlock]:(e,t)=>new Ke(e,t),[a.SpecDestructionWarlock]:(e,t)=>new Je(e,t),[a.SpecArmsWarrior]:(e,t)=>new ze(e,t),[a.SpecFuryWarrior]:(e,t)=>new qe(e,t),[a.SpecProtectionWarrior]:(e,t)=>new Ge(e,t)},et=I.naturalOrder.map(e=>Object.values(e.specs)).flat().map(e=>ae(e.specID)).map(e=>e.raidSimPresets).flat(),tt=[...new Set(et.map(e=>e.spec))];class at{constructor(e,t,a){this.raidIndex=-1,this.inferredProfessions=[],this.playersInParty=[],this.simUI=t,this.data=e,this.name=e.name,this.id=e.id,this.type=e.type;const s=e.icon.split("-")[1];this.fullType=this.type+s,console.log(`WCL spec: ${this.fullType}`);const r=st[this.fullType]??null;if(null==r)throw new Error("Player type not implemented: "+this.fullType);if(this.spec=r,this.player=new re(x.fromProto(this.spec),t.sim),this.preset=at.getMatchingPreset(r,e.talents),void 0===this.preset)throw new Error("Could not find matching preset: "+JSON.stringify({name:this.name,type:this.fullType,talents:e.talents}).toString());this.player.applySharedDefaults(a),this.player.setTalentsString(a,this.preset.talents.talentsString),this.player.setGlyphs(a,this.preset.talents.glyphs),this.player.setConsumes(a,this.preset.consumables),this.player.setSpecOptions(a,this.preset.specOptions),this.player.setProfessions(a,[i.Engineering,i.Jewelcrafting]),this.player.setName(a,e.name),this.player.setGear(a,t.sim.db.lookupEquipmentSpec(o.create({items:e.gear.map(e=>c.create({id:e.id,enchant:e.permanentEnchant,gems:e.gems?e.gems.map(e=>e.id):[]}))})))}static getMatchingPreset(e,t){const a=et.filter(t=>t.spec==e);let s=0;if(a&&a.length>1){let e=999;a.forEach((a,i)=>{const r=A(a.talents.talentsString),n=r.reduce((e,a,s)=>e+Math.abs(t[s]?.guid-r[s]),0);n<e&&(s=i,e=n)})}return a[s]}toUnitReference(){return d.create({type:h.Player,index:this.raidIndex})}addPlayerInParty(e){return e!=this&&!this.playersInParty.includes(e)&&(this.playersInParty.push(e),!0)}}const st={DeathKnightBlood:a.SpecBloodDeathKnight,DeathKnightFrost:a.SpecFrostDeathKnight,DeathKnightUnholy:a.SpecUnholyDeathKnight,DruidBalance:a.SpecBalanceDruid,DruidFeral:a.SpecFeralDruid,DruidRestoration:a.SpecRestorationDruid,HunterBeastMastery:a.SpecBeastMasteryHunter,HunterMarksmanship:a.SpecMarksmanshipHunter,HunterSurvival:a.SpecSurvivalHunter,MageArcane:a.SpecArcaneMage,MageFire:a.SpecFireMage,MageFrost:a.SpecFrostMage,PaladinHoly:a.SpecHolyPaladin,PaladinJusticar:a.SpecProtectionPaladin,PaladinProtection:a.SpecProtectionPaladin,PaladinRetribution:a.SpecRetributionPaladin,PriestHoly:a.SpecHolyPriest,PriestDiscipline:a.SpecDisciplinePriest,PriestShadow:a.SpecShadowPriest,RogueAssassination:a.SpecAssassinationRogue,RogueCombat:a.SpecCombatRogue,RogueSubtlety:a.SpecSubtletyRogue,ShamanElemental:a.SpecElementalShaman,ShamanEnhancement:a.SpecEnhancementShaman,ShamanRestoration:a.SpecRestorationShaman,WarlockDestruction:a.SpecDestructionWarlock,WarlockAffliction:a.SpecAfflictionWarlock,WarlockDemonology:a.SpecDemonologyWarlock,WarriorArms:a.SpecArmsWarrior,WarriorFury:a.SpecFuryWarrior,WarriorProtection:a.SpecProtectionWarrior},it=[{id:25046,name:"Arcane Torrent (Energy)",race:s.RaceBloodElf},{id:28730,name:"Arcane Torrent (Mana)",race:s.RaceBloodElf},{id:50613,name:"Arcane Torrent (Runic Power)",race:s.RaceBloodElf},{id:26297,name:"Berserking",race:s.RaceTroll},{id:20572,name:"Blood Fury (AP)",race:s.RaceOrc},{id:33697,name:"Blood Fury (AP+SP)",race:s.RaceOrc},{id:33702,name:"Blood Fury (SP)",race:s.RaceOrc},{id:20589,name:"Escape Artist",race:s.RaceGnome},{id:20594,name:"Stoneform",race:s.RaceDwarf},{id:20549,name:"War Stomp",race:s.RaceTauren},{id:7744,name:"Will of the Forsaken",race:s.RaceUndead},{id:59752,name:"Will to Survive",race:s.RaceHuman}],rt=[{id:55503,name:"Lifeblood",profession:i.Herbalism},{id:50305,name:"Skinning",profession:i.Skinning}],nt=[{id:29166,name:"Innervate",class:r.ClassDruid,applyFunc:(e,t)=>{const a=e.getSpecOptions();return a.classOptions.innervateTarget=t,a}},{id:57933,name:"Tricks of the Trade",class:r.ClassRogue,applyFunc:(e,t)=>{const a=e.getSpecOptions();return a.classOptions.tricksOfTheTradeTarget=t,a}},{id:49016,name:"Unholy Frenzy",class:r.ClassDeathKnight,applyFunc:(e,t)=>{const a=e.getSpecOptions();return a.unholyFrenzyTarget=t,a}}],lt=[{id:52042,name:"Healing Stream Totem"},{id:48076,name:"Holy Nova"},{id:48445,name:"Tranquility"},{id:15290,name:"Vampiric Embrace"}],ot=[{id:48072,name:"Prayer of Healing"}];class ct extends Xe{constructor(a,s){super(a,s,{title:"WCL Import",allowFileUpload:!1}),this.queryCounter=0,this.token="",this.textElem.classList.add("small-textarea"),this.descriptionElem.appendChild(e(t,null,e("p",null,"Imports the entire raid from a WCL report."),e("p",null,"To import, paste the WCL report and fight link (https://classic.warcraftlogs.com/reports/REPORTID#fight=FIGHTID).",e("br",null),"Include the fight ID or else the first fight in the report will be used."),e("p",null,"The following are imported directly from the report:",e("ul",null,e("li",null,"Player Name"),e("li",null,"Equipment (items, enchants, and gems)"),e("li",null,"Faction (Alliance / Horde)"),e("li",null,"Encounter: If the import link has a fight ID we try to match with a preset Encounter. Note that many Encounters are still unimplemented.")),"The following are not available directly from the report data, but we try to infer them:",e("ul",null,e("li",null,"Talents: Log data only gives us the tree summary (e.g. '51/20/0') so we match this with the closest preset talent build."),e("li",null,"Glyphs: Glyphs are absent from log data, but we pair them with the inferred Talents."),e("li",null,"Race: Inferred from Race-specific abilties used in any fight if possible, or defaults to Spec-specific Race."),e("li",null,"Professions: Inferred from profession-locked items/enchants/gems."),e("li",null,"Buff assignments (Innervate, Unholy Frenzy, etc): Inferred from casts."),e("li",null,"Party Composition: Inferred from party-only effects, such as Prayer of Healing, or Vampiric Touch.")),"The following are not imported, and instead use spec-specific defaults:",e("ul",null,e("li",null,"Rotation / Spec-specific options"),e("li",null,"Consumes"),e("li",null,"Paladin Blessings")))))}async getWCLBearerToken(){if(""==this.token){const e=await fetch("https://classic.warcraftlogs.com/oauth/token",{method:"POST",headers:{Authorization:"Basic "+btoa("963d31c8-7efa-4dde-87cf-1b254a8a2f8c:lRJVhujEEnF96xfUoxVHSpnqKN9v8bTqGEjutsO3")},body:new URLSearchParams({grant_type:"client_credentials"})}),t=await e.json();this.token=t.access_token}return this.token}async queryWCL(e){const t={"Content-Type":"application/json",Authorization:`Bearer ${await this.getWCLBearerToken()}`,Accept:"application/json"},a=`https://classic.warcraftlogs.com/api/v2/client?query=${e}`;this.queryCounter++;const s=await fetch(encodeURI(a),{method:"GET",headers:t}),i=await s.json();if(i?.errors?.length){const t=i.errors.map(e=>e.message).join("\n");throw new Error(`GraphQL error: ${t}\n\nQuery: ${e}`)}return console.debug(`WCL query: ${e}\n\nResult: ${JSON.stringify(i)}`),i}async parseURL(e){const t=e.match(/classic\.warcraftlogs\.com\/reports\/([a-zA-Z0-9:]+)\/?(#.*fight=((\d+)|(last)))?/);if(!t)throw new Error(`Invalid WCL URL ${e}, must look like "classic.warcraftlogs.com/reports/XXXX"`);const a={reportID:t[1],fightID:""};if(t[2]&&t[3]&&"last"!=t[3])a.fightID=t[3];else{const e=`{\n\t\t\t\treportData {\n\t\t\t\t\treport(code: "${a.reportID}") {\n\t\t\t\t\t\tfights(killType: Kills, translate: true) {\n\t\t\t\t\t\t\tid, name\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}`,s=(await this.queryWCL(e)).data.reportData.report.fights;"last"==t[3]?a.fightID=String(s[s.length-1].id):a.fightID=String(s[0].id)}return console.debug(`Importing WCL report: ${JSON.stringify(a)}`),a}async getRateLimit(){return(await this.queryWCL("{\n\t\trateLimitData {\n\t\t  limitPerHour, pointsSpentThisHour, pointsResetIn\n\t\t}\n\t  }")).data.rateLimitData}async onImport(e){this.importButton.disabled=!0,this.rootElem.style.cursor="wait";try{await this.doImport(e)}catch(t){console.error(t),alert("Failed import from WCL: "+t)}this.importButton.disabled=!1,this.rootElem.style.removeProperty("cursor")}async doImport(e){if(!e.length)throw new Error("No import link provided!");const t=await this.parseURL(e);await this.getRateLimit();const a=`{\n\t\t\treportData {\n\t\t\t\treport(code: "${t.reportID}") {\n\t\t\t\t\tguild {\n\t\t\t\t\t\tname faction {id}\n\t\t\t\t\t}\n\t\t\t\t\tplayerDetails: table(fightIDs: [${t.fightID}], dataType: Casts, killType: All, viewBy: Default)\n\t\t\t\t\tcombatantInfoEvents: events(fightIDs: [${t.fightID}], dataType:CombatantInfo, limit: 50) { data }\n\t\t\t\t\tfights(fightIDs: [${t.fightID}]) {\n\t\t\t\t\t\tstartTime, endTime, id, name\n\t\t\t\t\t}\n\n\t\t\t\t\treportCastEvents: events(dataType:Casts, endTime: 99999999, filterExpression: "${[it,rt].flat().map(e=>e.id).map(e=>`ability.id = ${e}`).join(" OR ")}", limit: 10000) { data }\n\n\t\t\t\t\tfightCastEvents: events(fightIDs: [${t.fightID}], dataType:Casts, filterExpression: "${[nt].flat().map(e=>e.id).map(e=>`ability.id = ${e}`).join(" OR ")}", limit: 10000) { data }\n\n\t\t\t\t\tfightHealEvents: events(fightIDs: [${t.fightID}], dataType:Healing, filterExpression: "${[lt,ot].flat().map(e=>e.id).map(e=>`ability.id = ${e}`).join(" OR ")}", limit: 10000) { data }\n\n\t\t\t\t\tmanaTideTotem: events(fightIDs: [${t.fightID}], dataType:Resources, filterExpression: "ability.id = 39609", limit: 100) { data }\n\t\t\t\t}\n\t\t\t}\n\t\t}`,s=(await this.queryWCL(a)).data.reportData.report,i=s.playerDetails.data.entries;S.freezeAllAndDo(()=>{const e=S.nextEventID(),t=i.map(t=>new at(t,this.simUI,e));this.inferRace(e,s,t),this.inferProfessions(e,s,t),this.inferAssignments(e,s,t),this.inferPartyComposition(e,s,t);const a=t.filter(e=>e.player.getClass()==r.ClassPaladin).length,n=P.create({encounter:this.getEncounterProto(s),raid:this.getRaidProto(t),blessings:E(a)});this.simUI.clearRaid(e),this.simUI.fromProto(e,n)}),this.close()}inferRace(e,t,a){a.forEach(t=>t.player.setRace(e,s.RaceUnknown));let i=t.guild?.faction?.id||this.simUI.raidPicker?.getCurrentFaction()||n.Horde;t.combatantInfoEvents.data.forEach(t=>{t.auras.filter(e=>28878==e.ability).forEach(t=>{const r=a.find(e=>e.id==t.source);r&&r.player.getRace()!=s.RaceDraenei&&(console.log(`Inferring player ${r.name} has race ${b.get(s.RaceDraenei)} from Heroic Presence aura event`),r.player.setRace(e,s.RaceDraenei),i=n.Alliance)})});const r=D(t.reportCastEvents.data,e=>String(e.abilityGameID));it.forEach(t=>{(r[t.id]||[]).forEach(s=>{const r=a.find(e=>e.id==s.sourceID);r&&(console.log(`Inferring player ${r.name} has race ${b.get(t.race)} from ${t.name} event`),r.player.setRace(e,t.race),i=k[t.race])})}),a.forEach(t=>{t.player.getRace()==s.RaceUnknown&&t.player.setRace(e,t.preset.defaultFactionRaces[i])})}inferProfessions(e,t,a){const s=D(t.reportCastEvents.data,e=>String(e.abilityGameID));rt.forEach(e=>{(s[e.id]||[]).forEach(t=>{const s=a.find(e=>e.id==t.sourceID);s&&!s.inferredProfessions.includes(e.profession)&&(console.log(`Inferring player ${s.name} has profession ${C.get(e.profession)} from ${e.name} event`),s.inferredProfessions.push(e.profession))})}),a.forEach(t=>{let a=v(t.inferredProfessions.concat(t.player.getGear().getProfessionRequirements()));0==a.length?a=[i.Engineering,i.Jewelcrafting]:1==a.length&&(a[0]!=i.Engineering?a.push(i.Engineering):a.push(i.Jewelcrafting)),t.player.setProfessions(e,a)})}inferAssignments(e,t,a){const s=D(t.fightCastEvents.data,e=>String(e.abilityGameID));nt.forEach(t=>{(s[t.id]||[]).forEach(s=>{const i=a.find(e=>e.id==s.sourceID),r=a.find(e=>e.id==s.targetID);if(i&&r&&i.player.getClass()==t.class){const a=t.applyFunc(i.player,r.toUnitReference());i.player.setSpecOptions(e,a),console.log(`Inferring player ${i.name} is targeting ${r.name} with ${t.name} from cast event`)}})})}inferPartyComposition(e,t,a){const s=(e,t,a)=>{(e.addPlayerInParty(t)||t.addPlayerInParty(e))&&console.log(`Inferring players ${e.name} and ${t.name} in same party from ${a} event`)},i=D(t.fightHealEvents.data,e=>String(e.abilityGameID));lt.forEach(e=>{(i[e.id]||[]).forEach(t=>{const i=a.find(e=>e.id==t.sourceID),r=a.find(e=>e.id==t.targetID);i&&r&&s(i,r,e.name)})}),ot.forEach(e=>{const t=i[e.id]||[],r=D(t,e=>String(e.timestamp)+String(e.sourceID));for(const[i,n]of Object.entries(r)){const t=n.map(e=>a.find(t=>t.id==e.targetID));for(let a=0;a<t.length;a++)for(let i=0;i<t.length;i++)a!=i&&t[a]&&t[i]&&s(t[a],t[i],e.name)}}),t.combatantInfoEvents.data.forEach(e=>{const t=a.find(t=>t.id==e.sourceID);e.auras.filter(e=>28878==e.ability).forEach(e=>{const i=a.find(t=>t.id==e.source);i&&t&&s(i,t,"Heroic Presence")})});let r=a.filter(e=>e.playersInParty.length>0),n=0;for(;r.length>0;){let e=[r[0]].concat(r[0].playersInParty),t=0;for(;e.length!=t;)t=e.length,e=v(e.map(e=>[e].concat(e.playersInParty)).flat());const a=n;n++,e.forEach((e,t)=>{e.raidIndex=5*a+t}),r=r.filter(t=>!e.includes(t))}const l=[...Array(40).keys()];a.filter(e=>-1==e.raidIndex).forEach(e=>{const t=l.find(e=>!a.some(t=>t.raidIndex==e))??-1;if(-1==t)throw new Error("Invalid next idx");e.raidIndex=t})}getEncounterProto(e){const t=e.fights[0],a=l.create({duration:(t.endTime-t.startTime)/1e3,targets:[]}),s=this.simUI.sim.db.getAllPresetEncounters().find(e=>e.path.includes(t.name));return s&&s.targets.length&&s.targets.map(e=>e.target).filter(e=>void 0!==e).forEach(e=>a.targets.push(e)),0===a.targets.length&&a.targets.push(se.defaultTargetProto()),a}getRaidProto(e){const t=w.create({parties:[...new Array(ie).keys()].map(e=>T.create({players:[...new Array(5).keys()].map(()=>R.create())}))});return e.forEach(e=>{const a=e.raidIndex%5,s=(e.raidIndex-a)/5,i=e.player.toProto();t.parties[s].players[a]=i,U(i).isTankSpec&&t.tanks.push(e.toUnitReference())}),t}}const dt=-1,ht=Math.min(...et.map(e=>Math.max(...Object.keys(e.defaultGear[n.Alliance]).map(e=>parseInt(e)))));class pt extends L{constructor(e,t){super(e,"raid-picker-root"),this.currentDragPlayer=null,this.currentDragPlayerFromIndex=dt,this.currentDragType=1,this.currentDragParty=null,this.raidSimUI=t,this.raid=t.sim.raid;const a=document.createElement("div");a.classList.add("raid-controls"),this.rootElem.appendChild(a),this.newPlayerPicker=new ft(this.rootElem,this),this.playerEditorModal=new gt,new ne(a,this.raidSimUI.sim.raid,{id:"raid-picker-size",label:"Raid Size",labelTooltip:"Number of players participating in the sim.",values:[{name:"5",value:1},{name:"10",value:2},{name:"25",value:5}],changedEvent:e=>e.numActivePartiesChangeEmitter,getValue:e=>e.getNumActiveParties(),setValue:(e,t,a)=>{t.setNumActiveParties(e,a)}}),new ne(a,this.newPlayerPicker,{id:"raid-picker-faction",label:"Default Faction",labelTooltip:"Default faction for newly-created players.",values:[{name:"Alliance",value:n.Alliance},{name:"Horde",value:n.Horde}],changedEvent:e=>this.raid.sim.factionChangeEmitter,getValue:e=>this.raid.sim.getFaction(),setValue:(e,t,a)=>{this.raid.sim.setFaction(e,a)}}),new ne(a,this.newPlayerPicker,{id:"raid-picker-gear",label:"Default Gear",labelTooltip:"Newly-created players will start with approximate BIS gear from this phase.",values:[...Array(ht).keys()].map(e=>{const t=e+1;return{name:"Phase "+t,value:t}}),changedEvent:e=>this.raid.sim.phaseChangeEmitter,getValue:e=>this.raid.sim.getPhase(),setValue:(e,t,a)=>{this.raid.sim.setPhase(e,a)}});const s=document.createElement("div");s.classList.add("parties-container"),this.rootElem.appendChild(s),this.partyPickers=this.raid.getParties().map((e,t)=>new mt(s,e,t,this));const i=()=>{1==this.raidSimUI.sim.raid.getNumActiveParties()?(s.classList.remove("parties-container-small"),s.classList.remove("parties-container-full")):this.raidSimUI.sim.raid.getNumActiveParties()<=2?(s.classList.add("parties-container-small"),s.classList.remove("parties-container-full")):(s.classList.remove("parties-container-small"),s.classList.add("parties-container-full")),this.partyPickers.forEach(e=>{e.index<this.raidSimUI.sim.raid.getNumActiveParties()?(e.rootElem.classList.add("active"),e.rootElem.classList.remove("hide")):(e.rootElem.classList.remove("active"),e.rootElem.classList.add("hide"))})};this.raidSimUI.sim.raid.numActivePartiesChangeEmitter.on(i),i(),this.rootElem.ondragend=e=>{this.clearDragPlayer(),this.clearDragParty()}}getCurrentFaction(){return this.raid.sim.getFaction()}getCurrentPhase(){return this.raid.sim.getPhase()}getPlayerPicker(e){return this.partyPickers[Math.floor(e/le)].playerPickers[e%le]}getPlayerPickers(){return[...new Array(25).keys()].map(e=>this.getPlayerPicker(e))}setDragPlayer(e,t,a){if(this.clearDragPlayer(),this.currentDragPlayer=e,this.currentDragPlayerFromIndex=t,this.currentDragType=a,t!=dt){this.getPlayerPicker(t).rootElem.classList.add("dragfrom")}}clearDragPlayer(){if(this.currentDragPlayerFromIndex!=dt){this.getPlayerPicker(this.currentDragPlayerFromIndex).rootElem.classList.remove("dragfrom")}this.currentDragPlayer=null,this.currentDragPlayerFromIndex=dt,this.currentDragType=1}setDragParty(e){this.currentDragParty=e,e.rootElem.classList.add("dragfrom")}clearDragParty(){this.currentDragParty&&(this.currentDragParty.rootElem.classList.remove("dragfrom"),this.currentDragParty=null)}}class mt extends L{constructor(a,s,i,r){super(a,"party-picker-root"),this.party=s,this.index=i,this.raidPicker=r;const n=p(),l=p(),o=p();this.rootElem.setAttribute("draggable","true"),this.rootElem.replaceChildren(e(t,null,e("div",{className:"party-header"},e("label",{className:"party-label form-label"},"Group ",i+1),e("div",{className:"party-results"},e("span",{ref:l,className:"party-results-dps"}),e("span",{ref:o,className:"party-results-reference-delta"}))),e("div",{ref:n,className:"players-container"})));const c=n.value;this.playerPickers=[...Array(le).keys()].map(e=>new ut(c,this,e));const d=l.value,h=o.value;this.raidPicker.raidSimUI.referenceChangeEmitter.on(()=>{const e=this.raidPicker.raidSimUI.getCurrentData(),t=this.raidPicker.raidSimUI.getReferenceData(),a=e?.simResult.raidMetrics.parties[this.index]?.dps.avg||0,s=t?.simResult.raidMetrics.parties[this.index]?.dps.avg||0;if(0==a&&0==s)return d.textContent="",void(h.textContent="");d.textContent=`${a.toFixed(1)} DPS`,t?B(h,s,a,1,void 0,void 0,!0):h.textContent=""}),this.rootElem.ondragstart=e=>{e.target==this.rootElem&&(e.dataTransfer.dropEffect="move",e.dataTransfer.effectAllowed="all",this.raidPicker.setDragParty(this))};let m=0;this.rootElem.ondragenter=e=>{e.preventDefault(),this.raidPicker.currentDragParty&&(m++,this.rootElem.classList.add("dragto"))},this.rootElem.ondragleave=e=>{e.preventDefault(),this.raidPicker.currentDragParty&&(m--,m<=0&&this.rootElem.classList.remove("dragto"))},this.rootElem.ondragover=e=>{e.preventDefault()},this.rootElem.ondrop=e=>{if(!this.raidPicker.currentDragParty)return;e.preventDefault(),m=0,this.rootElem.classList.remove("dragto");const t=S.nextEventID();S.freezeAllAndDo(()=>{const e=this.raidPicker.currentDragParty;for(let a=0;a<le;a++){const s=e.playerPickers[a],i=this.playerPickers[a],r=s.player,n=i.player;s.setPlayer(t,n,3),i.setPlayer(t,r,3)}}),this.raidPicker.clearDragParty()}}getClosestEmptyIndex(){const e=this.playerPickers.findIndex(e=>!e.player);return-1!==e?e:null}}class ut extends L{constructor(e,t,a){super(e,"player-picker-root"),this.labelElem=null,this.iconElem=null,this.nameElem=null,this.resultsElem=null,this.dpsResultElem=null,this.referenceDeltaElem=null,this.editButton=null,this.copyButton=null,this.deleteButton=null,this.abortController=new AbortController,this.signal=this.abortController.signal,this.index=a,this.raidIndex=t.index*le+a,this.player=null,this.partyPicker=t,this.raidPicker=t.raidPicker,this.rootElem.classList.add("player"),this.partyPicker.party.compChangeEmitter.on(e=>{const t=this.partyPicker.party.getPlayer(this.index);t!=this.player&&this.setPlayer(e,t,0)}),this.raidPicker.raidSimUI.referenceChangeEmitter.on(()=>{const e=this.raidPicker.raidSimUI.getCurrentData(),t=this.raidPicker.raidSimUI.getReferenceData(),a=e?.simResult.getPlayerWithRaidIndex(this.raidIndex)?.dps.avg||0,s=t?.simResult.getPlayerWithRaidIndex(this.raidIndex)?.dps.avg||0;this.player&&(this.resultsElem?.classList.remove("hide"),this.dpsResultElem.textContent=`${a.toFixed(1)} DPS`,t&&B(this.referenceDeltaElem,s,a,1,void 0,void 0,!0))});let s=0;this.rootElem.ondragenter=e=>{e.preventDefault(),this.raidPicker.currentDragParty||(s++,this.rootElem.classList.add("dragto"))},this.rootElem.ondragleave=e=>{e.preventDefault(),this.raidPicker.currentDragParty||(s--,s<=0&&this.rootElem.classList.remove("dragto"))},this.rootElem.ondragover=e=>e.preventDefault(),this.rootElem.ondrop=e=>{if(this.raidPicker.currentDragParty)return;const t=e.dataTransfer.getData("text/plain");e.preventDefault(),s=0,this.rootElem.classList.remove("dragto");const a=S.nextEventID();S.freezeAllAndDo(()=>{if(null==this.raidPicker.currentDragPlayer&&0==t.length)return;if(this.raidPicker.currentDragPlayerFromIndex==this.raidIndex)return void this.raidPicker.clearDragPlayer();const e=this.raidPicker.currentDragType;if(this.raidPicker.currentDragPlayerFromIndex!=dt){const t=this.raidPicker.getPlayerPicker(this.raidPicker.currentDragPlayerFromIndex);3==e?t.setPlayer(a,this.player,e):2==e&&t.setPlayer(a,null,e)}else if(null==this.raidPicker.currentDragPlayer){const e=atob(t),s=new Uint8Array(e.length);for(let t=0;t<s.length;t++)s[t]=e.charCodeAt(t);const i=N.fromBinary(s),r=new re(U(i),this.raidPicker.raidSimUI.sim);r.fromProto(a,i),this.raidPicker.currentDragPlayer=r}4==e?this.setPlayer(a,this.raidPicker.currentDragPlayer.clone(a),e):this.setPlayer(a,this.raidPicker.currentDragPlayer,e),this.raidPicker.clearDragPlayer()})},this.update()}setPlayer(e,t,s){t!=this.player&&(S.freezeAllAndDo(()=>{const i=this.partyPicker.getClosestEmptyIndex(),r=i&&i<this.index?i:this.index;if(this.player=t,t)this.partyPicker.party.setPlayer(e,r,t),1==s&&function(e,t,s){if(t.getPlayerSpec().isTankSpec){const a=s.getTanks(),i=a.findIndex(e=>null==s.getPlayerFromUnitReference(e));-1==i?a.length<3&&s.setTanks(e,a.concat([t.makeUnitReference()])):(a[i]=t.makeUnitReference(),s.setTanks(e,a))}if(t.getSpec()==a.SpecBalanceDruid){const a=t.getSpecOptions();a.classOptions.innervateTarget=H(t.getRaidIndex()),t.setSpecOptions(e,a)}else if(t.getSpec()==a.SpecUnholyDeathKnight){const a=t.getSpecOptions();a.unholyFrenzyTarget=H(t.getRaidIndex()),t.setSpecOptions(e,a)}}(e,t,this.raidPicker.raid);else{this.partyPicker.party.setPlayer(e,r,t);this.partyPicker.playerPickers.slice(this.index,5).filter(e=>e.player).forEach((t,a)=>{r<t.index&&this.partyPicker.party.setPlayer(e,r+a,t.player)}),this.partyPicker.party.compChangeEmitter.emit(e)}}),this.update())}update(){if(null==this.player)this.rootElem.className="player-picker-root player",this.rootElem.innerHTML="",this.labelElem=null,this.iconElem=null,this.nameElem=null,this.resultsElem=null,this.dpsResultElem=null,this.referenceDeltaElem=null;else{const a=I.getCssClass(this.player.getPlayerClass()),s=p(),i=p(),r=p(),n=p(),l=p(),o=p(),c=p(),d=p(),h=p();this.rootElem.className=`player-picker-root player bg-${a}-dampened`,this.rootElem.replaceChildren(e(t,null,e("div",{ref:s,className:"player-label"},e("img",{ref:i,className:"player-icon",src:this.player.getSpecIcon(),draggable:!0}),e("div",{className:"player-details"},e("input",{ref:r,className:F("player-name",`text-${a}`),type:"text",value:this.player.getName(),spellcheck:!1,maxLength:15}),e("div",{ref:n,className:"player-results hide"},e("span",{ref:l,className:"player-results-dps"}),e("span",{ref:o,className:"player-results-reference-delta"})))),e("div",{className:"player-options"},e("button",{ref:c,className:"player-edit",dataset:{tippyContent:"Click to Edit"}},e("i",{className:"fa fa-edit fa-lg"})),e("button",{ref:d,className:"player-copy link-warning",draggable:!0,dataset:{tippyContent:"Drag to Copy"}},e("i",{className:"fa fa-copy fa-lg"})),e("button",{ref:h,className:"player-delete link-danger",dataset:{tippyContent:"Click to Delete"}},e("i",{className:"fa fa-times fa-lg"}))))),this.labelElem=s.value,this.iconElem=i.value,this.nameElem=r.value,this.resultsElem=n.value,this.dpsResultElem=l.value,this.referenceDeltaElem=o.value,this.editButton=c.value,this.copyButton=d.value,this.deleteButton=h.value,this.bindPlayerEvents()}}bindPlayerEvents(){this.nameElem?.addEventListener("input",()=>{this.player?.setName(S.nextEventID(),this.nameElem?.value||"")},{signal:this.signal});this.nameElem?.addEventListener("mousedown",()=>{this.partyPicker.rootElem.setAttribute("draggable","false")},{signal:this.signal});this.nameElem?.addEventListener("mouseup",()=>{this.partyPicker.rootElem.setAttribute("draggable","true")},{signal:this.signal});this.nameElem?.addEventListener("focusout",()=>{this.nameElem&&!this.nameElem.value&&(this.nameElem.value="Unnamed",this.player?.setName(S.nextEventID(),this.nameElem.value))},{signal:this.signal});const e=(e,t)=>{if(null!==this.player){if(e.dataTransfer.dropEffect="move",e.dataTransfer.effectAllowed="all",this.player){const t=this.player.toProto(!0);e.dataTransfer.setData("text/plain",btoa(String.fromCharCode(...N.toBinary(t))))}this.raidPicker.setDragPlayer(this.player,this.raidIndex,t)}else e.preventDefault()},t=m(this.editButton),a=m(this.copyButton),s=m(this.deleteButton);this.iconElem?.addEventListener("dragstart",t=>{t.dataTransfer.setDragImage(this.rootElem,20,20),e(t,3)},{signal:this.signal});this.editButton?.addEventListener("click",()=>{this.player&&this.raidPicker.playerEditorModal.openEditor(this.player)},{signal:this.signal});this.copyButton?.addEventListener("dragstart",t=>{t.dataTransfer.setDragImage(this.rootElem,20,20),e(t,4)},{signal:this.signal});this.deleteButton?.addEventListener("click",()=>{this.setPlayer(S.nextEventID(),null,0),this.dispose()},{signal:this.signal}),this.addOnDisposeCallback(()=>{t?.destroy(),a?.destroy(),s?.destroy()})}}class gt extends oe{constructor(){super(document.body,"player-editor-modal",{closeButton:{fixed:!0},header:!1,disposeOnClose:!1});const t=p(),a=e("div",{ref:t,className:"player-editor within-raid-sim"});this.rootElem.id="playerEditorModal",this.body.appendChild(a),this.playerEditorRoot=t.value}openEditor(e){this.setData(e),super.open()}setData(e){this.playerEditorRoot.innerHTML="",Ye[e.getSpec()]?.(this.playerEditorRoot,e)}}class ft extends L{constructor(t,a){super(t,"new-player-picker-root"),this.raidPicker=a,O(r).forEach(t=>{if(t==r.ClassUnknown)return;const a=et.filter(e=>x.fromProto(e.spec).classID==t);0!=a.length&&this.rootElem.appendChild(e("div",{className:F("class-presets-container",`bg-${I.getCssClass(I.fromProto(t))}-dampened`)},a.map(e=>{const t=x.fromProto(e.spec),a=p();return e.tooltip??x.getFullSpecName(t),t.getIcon("medium"),a.value&&(m(a.value),a.value.ondragstart=a=>{const s=S.nextEventID();S.freezeAllAndDo(()=>{const r=new Image;r.src=e.iconUrl??t.getIcon("medium"),a.dataTransfer.setDragImage(r,30,30),a.dataTransfer.setData("text/plain",""),a.dataTransfer.dropEffect="copy";const n=new re(t,this.raidPicker.raid.sim);n.applySharedDefaults(s),n.setRace(s,e.defaultFactionRaces[this.raidPicker.getCurrentFaction()]),n.setTalentsString(s,e.talents.talentsString),n.setGlyphs(s,e.talents.glyphs||u.create()),n.setSpecOptions(s,e.specOptions),n.setConsumes(s,e.consumables),n.setName(s,e.defaultName??t.friendlyName),n.setProfession1(s,e.otherDefaults?.profession1||i.Engineering),n.setProfession2(s,e.otherDefaults?.profession2||i.Jewelcrafting),n.setDistanceFromTarget(s,e.otherDefaults?.distanceFromTarget||0),this.raidPicker.raid.sim.waitForInit().then(()=>{const t=Math.min(this.raidPicker.getCurrentPhase(),ht),a=e.defaultGear[this.raidPicker.getCurrentFaction()][t];n.setGear(s,this.raidPicker.raid.sim.db.lookupEquipmentSpec(a))}),this.raidPicker.setDragPlayer(n,dt,1)})}),a.value})))})}}class yt extends L{constructor(t,a){super(t,"raid-stats");const s=[];Et.sections.forEach(t=>{const i=p(),r=e("div",{className:"raid-stats-section"},e("div",{className:"raid-stats-section-header"},e("label",{className:"raid-stats-section-label form-label"},t.label)),e("div",{ref:i,className:"raid-stats-section-content"}));this.rootElem.appendChild(r);const n=i.value;t.categories.forEach(e=>{s.push(new Pt(n,a,e))})}),this.categories=s,a.changeEmitter.on(e=>this.categories.forEach(e=>e.update()))}}class Pt extends L{constructor(t,a,s){super(t,"raid-stats-category-root"),this.raidSimUI=a,this.options=s;const i=p(),r=p();if(this.rootElem.appendChild(e("button",{ref:r,className:"raid-stats-category"},e("span",{ref:i,className:"raid-stats-category-counter"}),e("span",{className:"raid-stats-category-label"},s.label))),this.counterElem=i.value,this.tooltipElem=e("div",null,e("label",{className:"raid-stats-category-label"},s.label)),this.effects=s.effects.map(e=>new St(this.tooltipElem,a,e)),1!=s.effects.length||s.effects[0].playerData?.class){const e=r.value;m(e,{theme:"raid-stats-category-tooltip",placement:"right",content:this.tooltipElem})}}update(){this.effects.forEach(e=>e.update());const e=W(this.effects.map(e=>e.count));this.counterElem.textContent=String(e);const t=this.rootElem.querySelector(".raid-stats-category");t?.classList[0===e?"remove":"add"]("active")}}class St extends L{constructor(a,s,i){super(a,"raid-stats-effect"),this.raidSimUI=s,this.options=i,this.curPlayers=[],this.count=0;const r=p(),n=p(),l=p();if(this.rootElem.appendChild(e(t,null,e("span",{ref:r,className:"raid-stats-effect-counter"}),e("img",{ref:l,className:"raid-stats-effect-icon"}),e("span",{ref:n,className:"raid-stats-effect-label"},i.label))),this.counterElem=r.value,this.options.playerData?.class){const e=$(I.fromProto(this.options.playerData.class));n.value.classList.add(e)}i.actionId?i.actionId.fill().then(e=>l.value.src=e.iconUrl):l.value.remove()}update(){this.options.playerData&&(this.curPlayers=this.raidSimUI.getActivePlayers().filter(e=>this.options.playerData.condition(e)));const e=this.options.raidData&&this.options.raidData(this.raidSimUI.sim.raid);this.count=this.curPlayers.length+(e?1:0),this.counterElem.textContent=String(this.count),0==this.count?this.rootElem.classList.remove("active"):this.rootElem.classList.add("active")}}function It(e,t){return{class:e,condition:a=>a.isClass(e)&&(!t||t(a))}}const Et={sections:[{label:"Roles",categories:[{label:"Tanks",effects:[{label:"Tanks",playerData:{condition:e=>e.getPlayerSpec().isTankSpec}}]},{label:"Healers",effects:[{label:"Healers",playerData:{condition:e=>e.getPlayerSpec().isHealingSpec}}]},{label:"Melee",effects:[{label:"Melee",playerData:{condition:e=>e.getPlayerSpec().isMeleeDpsSpec}}]},{label:"Ranged",effects:[{label:"Ranged",playerData:{condition:e=>e.getPlayerSpec().isRangedDpsSpec}}]}]},{label:"Buffs",categories:[{label:"Major Haste",effects:[{label:"Bloodlust",actionId:M.fromSpellId(2825),playerData:It(r.ClassShaman)},{label:"Heroism",actionId:M.fromSpellId(32182),playerData:It(r.ClassShaman)},{label:"Time Warp",actionId:M.fromSpellId(80353),playerData:It(r.ClassMage)}]},{label:"Stats",effects:[{label:"Mark of the Wild",actionId:M.fromSpellId(1126),playerData:It(r.ClassDruid)},{label:"Blessing of Kings",actionId:M.fromSpellId(20217),playerData:It(r.ClassPaladin)}]},{label:"Attack Power",effects:[{label:"Trueshot Aura",actionId:M.fromSpellId(19506),playerData:It(r.ClassHunter)},{label:"Horn of Winter",actionId:M.fromSpellId(57330),playerData:It(r.ClassDeathKnight)},{label:"Battle Shout",actionId:M.fromSpellId(6673),playerData:It(r.ClassWarrior)}]},{label:"Attack Speed",effects:[{label:"Unholy Aura",actionId:M.fromSpellId(55610),playerData:It(r.ClassDeathKnight)},{label:"Serpent's Swiftness",actionId:M.fromSpellId(128433),playerData:It(r.ClassHunter)},{label:"Swiftblade's Cunning",actionId:M.fromSpellId(113742),playerData:It(r.ClassRogue)},{label:"Unleashed Rage",actionId:M.fromSpellId(30809),playerData:It(r.ClassShaman)}]},{label:"Spell Power",effects:[{label:"Arcane Brilliance",actionId:M.fromSpellId(1459),playerData:It(r.ClassMage)},{label:"Still Water",actionId:M.fromSpellId(126309),playerData:It(r.ClassPriest)},{label:"Burning Wrath",actionId:M.fromSpellId(77747),playerData:It(r.ClassShaman)},{label:"Dark Intent",actionId:M.fromSpellId(109773),playerData:It(r.ClassWarlock)}]},{label:"Spell Haste",effects:[{label:"Shadow Form",actionId:M.fromSpellId(15473),playerData:It(r.ClassPriest)},{label:"Moonkin Aura",actionId:M.fromSpellId(24907),playerData:It(r.ClassDruid)},{label:"Mind Quickening",actionId:M.fromSpellId(49868),playerData:It(r.ClassPriest)},{label:"Elemental Oath",actionId:M.fromSpellId(51470),playerData:It(r.ClassShaman)}]},{label:"Crit %",effects:[{label:"Leader of the Pack",actionId:M.fromSpellId(17007),playerData:It(r.ClassDruid)},{label:"Furious Howl",actionId:M.fromSpellId(24604),playerData:It(r.ClassHunter)},{label:"Terrifying Roar",actionId:M.fromSpellId(90309),playerData:It(r.ClassHunter)},{label:"Legacy of the White Tiger",actionId:M.fromSpellId(116781),playerData:It(r.ClassMonk)}]},{label:"Mastery",effects:[{label:"Blessing of Might",actionId:M.fromSpellId(19740),playerData:It(r.ClassPaladin)},{label:"Roar of Courage",actionId:M.fromSpellId(93435),playerData:It(r.ClassHunter)},{label:"Spirit Beast Blessing",actionId:M.fromSpellId(128997),playerData:It(r.ClassHunter)},{label:"Grace of Air",actionId:M.fromSpellId(116956),playerData:It(r.ClassShaman)}]},{label:"Stamina",effects:[{label:"Power Word: Fortitude",actionId:M.fromSpellId(21562),playerData:It(r.ClassPriest)},{label:"Qiraji Fortitude",actionId:M.fromSpellId(90364),playerData:It(r.ClassHunter)},{label:"Commanding Shout",actionId:M.fromSpellId(469),playerData:It(r.ClassWarrior)}]},{label:"Mana Regen",effects:[{label:"Mana Tide Totem",actionId:M.fromSpellId(5675),playerData:It(r.ClassShaman)}]}]},{label:"External Buffs",categories:[{label:"Innervate",effects:[{label:"Innervate",actionId:M.fromSpellId(29166),playerData:It(r.ClassDruid)}]},{label:"Tricks of the Trade",effects:[{label:"Tricks of the Trade",actionId:M.fromSpellId(57933),playerData:It(r.ClassRogue)}]},{label:"Dark Intent",effects:[{label:"Dark Intent",actionId:M.fromSpellId(85759),playerData:It(r.ClassWarlock)}]},{label:"Devotion Aura",effects:[{label:"Devotion Aura",actionId:M.fromSpellId(31821),playerData:It(r.ClassPaladin)}]}]},{label:"DPS Debuffs",categories:[{label:"-Armor %",effects:[{label:"Sunder Armor",actionId:M.fromSpellId(7386),playerData:It(r.ClassWarrior)},{label:"Expose Armor",actionId:M.fromSpellId(8647),playerData:It(r.ClassRogue)},{label:"Faerie Fire",actionId:M.fromSpellId(770),playerData:It(r.ClassDruid)},{label:"Corosive Spit",actionId:M.fromSpellId(35387),playerData:It(r.ClassHunter,e=>e.getSpecOptions().classOptions?.petType==j.Serpent)}]},{label:"Phys Vuln",effects:[{label:"Acid Spit",actionId:M.fromSpellId(55749),playerData:It(r.ClassHunter,e=>e.getSpecOptions().classOptions?.petType==j.Worm)}]},{label:"+Bleed %",effects:[{label:"Mangle",actionId:M.fromSpellId(33878),playerData:It(r.ClassDruid,e=>e.isSpec(a.SpecFeralDruid))},{label:"Stampede",actionId:M.fromSpellId(57386),playerData:It(r.ClassHunter,e=>e.getSpecOptions().classOptions?.petType==j.Rhino)}]},{label:"Spell Crit",effects:[]},{label:"Spell Dmg",effects:[{label:"Curse of Elements",actionId:M.fromSpellId(1490),playerData:It(r.ClassWarlock)},{label:"Fire Breath",actionId:M.fromSpellId(34889),playerData:It(r.ClassHunter,e=>e.getSpecOptions().classOptions?.petType==j.Dragonhawk)},{label:"Lightning Breath",actionId:M.fromSpellId(24844),playerData:It(r.ClassHunter,e=>e.getSpecOptions().classOptions?.petType==j.WindSerpent)}]}]},{label:"Mitigation Debuffs",categories:[{label:"-Dmg %",effects:[{label:"Curse of Weakness",actionId:M.fromSpellId(702),playerData:It(r.ClassWarlock)},{label:"Demoralizing Roar",actionId:M.fromSpellId(99),playerData:It(r.ClassDruid,e=>e.isSpec(a.SpecFeralDruid))},{label:"Demoralizing Shout",actionId:M.fromSpellId(1160),playerData:It(r.ClassWarrior)}]},{label:"Atk Speed",effects:[{label:"Thunder Clap",actionId:M.fromSpellId(6343),playerData:It(r.ClassWarrior)},{label:"Frost Fever",actionId:M.fromSpellId(59921),playerData:It(r.ClassDeathKnight)},{label:"Earth Shock",actionId:M.fromSpellId(8042),playerData:It(r.ClassShaman)},{label:"Dust Cloud",actionId:M.fromSpellId(50285),playerData:It(r.ClassHunter,e=>e.getSpecOptions().classOptions?.petType==j.Tallstrider)}]}]}]};class bt extends ce{constructor(e,t){super(e,t,{identifier:"raid-tab",title:"Raid"}),this.simUI=t,this.rootElem.classList.add("active","show"),this.leftPanel=document.createElement("div"),this.leftPanel.classList.add("raid-tab-left","tab-panel-left"),this.rightPanel=document.createElement("div"),this.rightPanel.classList.add("raid-tab-right","tab-panel-right"),this.contentContainer.appendChild(this.leftPanel),this.contentContainer.appendChild(this.rightPanel),this.buildTabContent()}buildTabContent(){this.simUI.raidPicker=new pt(this.leftPanel,this.simUI),new yt(this.leftPanel,this.simUI);const e=new de(this.rightPanel,this.simUI,{label:"Raid",header:{title:"Saved Raid Groups"},storageKey:this.simUI.getSavedRaidStorageKey(),getData:()=>V.create({raid:this.simUI.sim.raid.toProto(),blessings:this.simUI.blessingsPicker?.getAssignments(),faction:this.simUI.sim.getFaction(),phase:this.simUI.sim.getPhase()}),setData:(e,t,a)=>{S.freezeAllAndDo(()=>{this.simUI.sim.raid.fromProto(e,a.raid||w.create()),this.simUI.blessingsPicker?.setAssignments(e,a.blessings||K.create()),a.faction&&this.simUI.sim.setFaction(e,a.faction),a.phase&&this.simUI.sim.setPhase(e,a.phase)})},changeEmitters:[this.simUI.changeEmitter,this.simUI.sim.changeEmitter],equals:(e,t)=>V.equals(e,t),toJson:e=>V.toJson(e),fromJson:e=>V.fromJson(e)});this.simUI.sim.waitForInit().then(()=>{e.loadUserData()})}}class Dt extends J{constructor(e,t,a,s){super(e,"raid-target-picker-root",a,s),this.rootElem.classList.add("dropdown"),this.config=s,this.raid=t,this.curPlayer=this.raid.getPlayerFromUnitReference(s.getValue(a)),this.curUnitReference=this.getInputValue(),this.rootElem.innerHTML='\n\t\t\t<button class="raid-target-picker-button" data-bs-toggle="dropdown"></button>\n\t\t\t<div class="dropdown-menu"></div>\n    ',this.buttonElem=this.rootElem.querySelector(".raid-target-picker-button"),this.dropdownElem=this.rootElem.querySelector(".dropdown-menu"),this.buttonElem.addEventListener("click",e=>e.preventDefault()),this.currentOptions=[],this.updateOptions(S.nextEventID()),s.compChangeEmitter.on(e=>this.updateOptions(e)),this.init()}makeTargetOptions(){return[{player:null,isDropdown:!0},...this.raid.getPlayers().filter(e=>null!=e).map(e=>({player:e,isDropdown:!0}))]}updateOptions(e){this.currentOptions=this.makeTargetOptions(),this.dropdownElem.innerHTML="",this.currentOptions.forEach(e=>this.dropdownElem.appendChild(this.makeOption(e)));const t=this.curUnitReference;this.curUnitReference=this.getInputValue(),d.equals(t,this.curUnitReference)?this.setInputValue(this.curUnitReference):this.inputChanged(e)}makeOption(e){const t=Dt.makeOptionElem(e);return t.addEventListener("click",t=>{t.preventDefault(),this.curPlayer=e.player,this.curUnitReference=this.getInputValue(),this.inputChanged(S.nextEventID())}),t}getInputElem(){return this.buttonElem}getInputValue(){return this.curPlayer?this.curPlayer.makeUnitReference():z()}setInputValue(e){this.curUnitReference=d.clone(e),this.curPlayer=this.raid.getPlayerFromUnitReference(this.curUnitReference);const t=this.currentOptions.find(e=>e.player==this.curPlayer);t&&(this.buttonElem.innerHTML=Dt.makeOptionElem({player:t.player}).outerHTML)}static makeOptionElem(t){const a=t.player?I.getCssClass(t.player.getPlayerClass()):void 0;let s=e("div",{className:F("player",a&&`bg-${a}-dampened`)},e("div",{className:"player-label"},t.player&&e("img",{className:"player-icon",src:"${data.player.getSpecIcon()}",draggable:!1}),e("div",{className:"player-details"},e("span",{className:F("player-name",a&&`text-${a}`)},t.player?t.player.getName():"Unassigned"))));return t.isDropdown&&(s=e("button",{className:"dropdown-option"},s)),s}}class kt extends L{constructor(e,t){super(e,"assignments-picker-root"),this.changeEmitter=new S,this.raidSimUI=t,this.innervatesPicker=new vt(this.rootElem,t),this.tricksOfTheTradesPicker=new wt(this.rootElem,t),this.unholyFrenzyPicker=new Tt(this.rootElem,t)}}class Ct extends L{constructor(e,t){super(e,"assigned-buff-picker-root"),this.changeEmitter=new S,this.raidSimUI=t,this.targetPickers=[],this.playersContainer=document.createElement("div"),this.playersContainer.classList.add("assigned-buff-container"),this.rootElem.appendChild(this.playersContainer),this.raidSimUI.changeEmitter.on(e=>this.update()),this.update()}update(){this.playersContainer.innerHTML=`\n\t\t\t<label class="assignmented-buff-label form-label">${this.getTitle()}</label>\n\t\t`;const e=this.getSourcePlayers();0==e.length?this.rootElem.classList.add("hide"):this.rootElem.classList.remove("hide"),this.targetPickers=e.map((e,t)=>{const a=document.createElement("div");a.classList.add("assigned-buff-player","input-inline"),this.playersContainer.appendChild(a);const s=document.createElement("div");s.classList.add("raid-target-picker-root"),s.appendChild(Dt.makeOptionElem({player:e,isDropdown:!1})),a.appendChild(s);const i=document.createElement("i");i.classList.add("assigned-buff-arrow","fa","fa-arrow-right"),a.appendChild(i);const r=new Dt(a,this.raidSimUI.sim.raid,e,{extraCssClasses:["assigned-buff-target-picker"],noTargetLabel:"Unassigned",compChangeEmitter:this.raidSimUI.sim.raid.compChangeEmitter,changedEvent:e=>e.specOptionsChangeEmitter,getValue:e=>this.getPlayerValue(e),setValue:(e,t,a)=>this.setPlayerValue(e,t,a)}),n={player:e,targetPicker:r,targetPlayer:this.raidSimUI.sim.raid.getPlayerFromUnitReference(r.getInputValue())};return r.changeEmitter.on(e=>{n.targetPlayer=this.raidSimUI.sim.raid.getPlayerFromUnitReference(r.getInputValue())}),n})}}class vt extends Ct{getTitle(){return"Innervate"}getSourcePlayers(){return this.raidSimUI.getActivePlayers().filter(e=>e.isClass(r.ClassDruid))}getPlayerValue(e){return e.getSpecOptions().classOptions?.innervateTarget||z()}setPlayerValue(e,t,a){const s=t.getSpecOptions();s.classOptions.innervateTarget=a,t.setSpecOptions(e,s)}}class wt extends Ct{getTitle(){return"Tricks of the Trade"}getSourcePlayers(){return this.raidSimUI.getActivePlayers().filter(e=>e.isClass(r.ClassRogue))}getPlayerValue(e){return e.getSpecOptions().classOptions.tricksOfTheTradeTarget||z()}setPlayerValue(e,t,a){const s=t.getSpecOptions();s.classOptions.tricksOfTheTradeTarget=a,t.setSpecOptions(e,s)}}class Tt extends Ct{getTitle(){return"Unholy Frenzy"}getSourcePlayers(){return this.raidSimUI.getActivePlayers().filter(e=>e.isSpec(a.SpecUnholyDeathKnight)&&!1)}getPlayerValue(e){return e.getSpecOptions().unholyFrenzyTarget||z()}setPlayerValue(e,t,a){const s=t.getSpecOptions();s.unholyFrenzyTarget=a,t.setSpecOptions(e,s)}}class Rt extends L{constructor(e,t){super(e,"blessings-picker-root"),this.changeEmitter=new S,this.pickers=[],this.simUI=t,this.assignments=K.clone(E(4));const a=I.naturalOrder.map(e=>Object.values(e.specs)).flat().filter(e=>tt.includes(e.specID)),s=[...Array(4).keys()];a.map(e=>{const t=document.createElement("div");t.classList.add("blessings-picker-row"),this.rootElem.appendChild(t),t.append(this.buildSpecIcon(e));const a=document.createElement("div");return a.classList.add("blessings-picker-container"),t.appendChild(a),s.forEach(t=>{this.pickers[t]||this.pickers.push([]);const s=new he(a,this,{extraCssClasses:["blessing-picker"],numColumns:1,values:[{color:G.hexColor,value:q.BlessingUnknown},{actionId:M.fromSpellId(20217),value:q.BlessingOfKings},{actionId:M.fromSpellId(19740),value:q.BlessingOfMight}],equals:(e,t)=>e==t,zeroValue:q.BlessingUnknown,enableWhen:e=>{const a=Math.min(this.simUI.getClassCount(r.ClassPaladin),4);return t<a},changedEvent:e=>e.changeEmitter,getValue:a=>a.assignments.paladins[t]?.blessings[e.specID]||q.BlessingUnknown,setValue:(a,s,i)=>{s.assignments.paladins[t].blessings[e.specID]!=i&&(s.assignments.paladins[t].blessings[e.specID]=i,this.changeEmitter.emit(a))}});this.pickers[t].push(s)}),t}),this.updatePickers(),this.simUI.compChangeEmitter.on(e=>this.updatePickers())}updatePickers(){for(let e=0;e<4;e++)this.pickers[e].forEach(e=>e.update())}buildSpecIcon(e){const t=document.createElement("fragment");t.innerHTML=`\n\t\t\t<div class="blessings-picker-spec">\n\t\t\t\t<img\n\t\t\t\t\tsrc="${e.getIcon("medium")}"\n\t\t\t\t\tclass="blessings-spec-icon"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t`;const a=t.querySelector(".blessings-spec-icon");return m(a,{content:e.friendlyName}),t.children[0]}getAssignments(){return K.clone(this.assignments)}setAssignments(e,t){this.assignments=K.clone(t),this.changeEmitter.emit(e)}}class Ut extends L{constructor(e,t){super(e,"tanks-picker-root"),this.raidSimUI=t;const a=this.raidSimUI.sim.raid;for(let s=0;s<4;s++){const e=document.createElement("div");e.classList.add("tank-picker-row","input-inline"),this.rootElem.appendChild(e);const t=document.createElement("label");t.textContent=0==s?"Main Tank":`Tank ${s+1}`,t.classList.add("tank-picker-label","form-label"),e.appendChild(t),new Dt(e,a,a,{extraCssClasses:["tank-picker"],noTargetLabel:"Unassigned",compChangeEmitter:a.compChangeEmitter,changedEvent:e=>e.tanksChangeEmitter,getValue:e=>e.getTanks()[s]||z(),setValue:(e,t,a)=>{const i=t.getTanks();for(let r=0;r<s;r++)i[r]||i.push(z());i[s]=a,t.setTanks(e,i)}})}}}class xt extends ce{constructor(e,t){super(e,t,{identifier:"raid-settings-tab",title:"Settings"}),this.column1=this.buildColumn(1,"raid-settings-col"),this.column2=this.buildColumn(2,"raid-settings-col"),this.column3=this.buildColumn(3,"raid-settings-col"),this.simUI=t,this.leftPanel=document.createElement("div"),this.leftPanel.classList.add("raid-settings-tab-left","tab-panel-left"),this.leftPanel.appendChild(this.column1),this.leftPanel.appendChild(this.column2),this.leftPanel.appendChild(this.column3),this.rightPanel=document.createElement("div"),this.rightPanel.classList.add("raid-settings-tab-right","tab-panel-right","within-raid-sim-hide"),this.contentContainer.appendChild(this.leftPanel),this.contentContainer.appendChild(this.rightPanel),this.buildTabContent()}buildTabContent(){this.buildEncounterSettings(),this.buildConsumesSettings(),this.buildTankSettings(),this.buildAssignmentSettings(),this.buildOtherSettings(),this.buildBlessingsPicker(),this.buildSavedDataPickers()}buildEncounterSettings(){const e=new pe(this.column1,"encounter-settings",{header:{title:"Encounter"}});new me(e.bodyElement,this.simUI.sim.encounter,{showExecuteProportion:!0},this.simUI)}buildConsumesSettings(){const e=new pe(this.column1,"consumes-settings",{header:{title:"Consumables"}}),t=document.createElement("div");t.classList.add("consumes-container"),e.bodyElement.appendChild(t)}buildOtherSettings(){new pe(this.column2,"other-settings",{header:{title:"Other"}})}buildTankSettings(){const e=new pe(this.column2,"tanks-settings",{header:{title:"Tanks"}});new Ut(e.bodyElement,this.simUI)}buildAssignmentSettings(){const e=new pe(this.column2,"assignments-settings",{header:{title:"External Buffs"}});new kt(e.bodyElement,this.simUI)}buildBlessingsPicker(){const e=new pe(this.column3,"blessings-settings",{header:{title:"Blessings",tooltip:_}});this.simUI.blessingsPicker=new Rt(e.bodyElement,this.simUI),this.simUI.blessingsPicker.changeEmitter.on(e=>this.simUI.changeEmitter.emit(e))}buildSavedDataPickers(){const e=new de(this.rightPanel,this.simUI.sim.encounter,{label:"Encounter",header:{title:"Saved Encounters"},storageKey:this.simUI.getSavedEncounterStorageKey(),getData:e=>Q.create({encounter:e.toProto()}),setData:(e,t,a)=>t.fromProto(e,a.encounter),changeEmitters:[this.simUI.sim.encounter.changeEmitter],equals:(e,t)=>Q.equals(e,t),toJson:e=>Q.toJson(e),fromJson:e=>Q.fromJson(e)});this.simUI.sim.waitForInit().then(()=>{e.loadUserData()})}makeBooleanRaidIconBuffInput(e,t,a){const s=this.simUI.sim.raid;return new ue(e,s,{actionId:t,states:2,changedEvent:e=>e.buffsChangeEmitter,getValue:e=>e.getBuffs()[a],setValue:(e,t,s)=>{const i=t.getBuffs();i[a]=s,t.setBuffs(e,i)}})}}const At=[];new class extends ge{constructor(e,t){super(e,new fe({type:X.SimTypeRaid}),{cssClass:"raid-sim-ui",cssScheme:"raid",spec:null,simStatus:g,knownIssues:(t.knownIssues||[]).concat(At)}),this.raidSimResultsManager=null,this.raidPicker=null,this.blessingsPicker=null,this.compChangeEmitter=new S,this.changeEmitter=new S,this.referenceChangeEmitter=new S,this.sim.raid.compChangeEmitter.on(e=>this.compChangeEmitter.emit(e)),[this.compChangeEmitter,this.sim.changeEmitter].forEach(e=>e.on(e=>this.changeEmitter.emit(e))),this.changeEmitter.on(()=>this.recomputeSettingsLayout()),this.sim.setModifyRaidProto(e=>this.modifyRaidProto(e)),this.sim.waitForInit().then(()=>this.loadSettings()),this.addSidebarComponents(),this.addTopbarComponents(),this.addRaidTab(),this.addSettingsTab(),this.addDetailedResultsTab()}loadSettings(){const e=S.nextEventID();S.freezeAllAndDo(()=>{let t=!1;const a=window.localStorage.getItem(this.getSettingsStorageKey());if(null!=a)try{const s=P.fromJsonString(a);this.fromProto(e,s),t=!0}catch(s){console.warn("Failed to parse saved settings: "+s)}t||this.applyDefaults(e),this.changeEmitter.on(e=>{const t=P.toJsonString(this.toProto());window.localStorage.setItem(this.getSettingsStorageKey(),t)})})}addSidebarComponents(){this.raidSimResultsManager=Z(this),this.raidSimResultsManager.changeEmitter.on(e=>this.referenceChangeEmitter.emit(e))}addTopbarComponents(){this.simHeader.addImportLink("JSON",new Ze(this.rootElem,this)),this.simHeader.addImportLink("WCL",new ct(this.rootElem,this)),this.simHeader.addExportLink("JSON",new Qe(this.rootElem,this))}addRaidTab(){new bt(this.simTabContentsContainer,this)}addSettingsTab(){new xt(this.simTabContentsContainer,this)}addDetailedResultsTab(){const t=e("div",{className:"detailed-results"});this.addTab(f.t("results.title"),"detailed-results-tab",t),new Y(t,this,this.raidSimResultsManager)}recomputeSettingsLayout(){window.dispatchEvent(new Event("resize"))}modifyRaidProto(e){const t=this.getClassCount(r.ClassPaladin),a=this.blessingsPicker.getAssignments();tt.forEach(s=>{const i=e.parties.map(e=>e.players.filter(e=>e.class!=r.ClassUnknown&&U(e)==s)).flat();a.paladins.forEach((a,r)=>{r>=t||(a.blessings[s]==q.BlessingOfKings?i.forEach(()=>e.buffs.blessingOfKings=!0):a.blessings[s]==q.BlessingOfMight&&i.forEach(()=>e.buffs.blessingOfMight=!0))})})}getCurrentData(){return this.raidSimResultsManager?this.raidSimResultsManager.getCurrentData():null}getReferenceData(){return this.raidSimResultsManager?this.raidSimResultsManager.getReferenceData():null}getActivePlayers(){return this.sim.raid.getActivePlayers()}getClassCount(e){return this.getActivePlayers().filter(t=>t.isClass(e)).length}applyDefaults(e){S.freezeAllAndDo(()=>{this.sim.raid.fromProto(e,w.create({numActiveParties:5})),this.sim.setPhase(e,1),this.sim.encounter.applyDefaults(e),this.sim.applyDefaults(e,!0,!0),this.sim.setShowDamageMetrics(e,!0)})}toProto(){const e=this.sim.raid.getPlayers().filter(e=>e?.getClass()===r.ClassPaladin).length;return P.create({settings:this.sim.toProto(),raid:this.sim.raid.toProto(!0),blessings:this.blessingsPicker?.getAssignments()??E(e),encounter:this.sim.encounter.toProto()})}toLink(){const e=this.toProto();e.settings=void 0;const t=P.toBinary(e),a=ye.deflate(t,{to:"string"}),s=btoa(String.fromCharCode(...a)),i=new URL(window.location.href);return i.hash=s,i.toString()}fromProto(e,t){S.freezeAllAndDo(()=>{t.settings&&this.sim.fromProto(e,t.settings),this.sim.raid.fromProto(e,t.raid||w.create()),this.sim.encounter.fromProto(e,t.encounter||l.create()),this.blessingsPicker?.setAssignments(e,t.blessings||K.create())})}clearRaid(e){this.sim.raid.clear(e)}getStorageKey(e){return"__mop_raid__"+e}getSavedRaidStorageKey(){return this.getStorageKey("__savedRaid__")}}(document.body,{}),y();
