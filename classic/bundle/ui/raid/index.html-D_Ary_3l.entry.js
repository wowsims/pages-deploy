import{t}from"../../index-CsPe537V.chunk.js";import{S as e,n as a,R as s,e as i,f as r,T as n,a as l,P as o,C as c,m as d,F as h,b as m,r as p,c as u,p as g,d as f,E as y,g as I,h as P,i as E,j as S,k as b,l as D,I as k,o as v,U as C,q as w,s as T,t as R,u as U,v as x,w as L,x as A,y as O,z as B,A as W,B as F,G as M,H,J as $,K as j,L as N,M as q,N as V,O as z,Q as J,V as G,X as K,Y as _,Z as X,_ as Q,$ as Z,a0 as Y,a1 as tt,a2 as et,a3 as at,a4 as st,a5 as it,a6 as rt}from"../../detailed_results-CJY9MGga.chunk.js";import{g as nt,E as lt,I as ot,a as ct,M as dt,P as ht,b as mt,c as pt,B as ut,d as gt,e as ft,f as yt,C as It,h as Pt,i as Et,j as St,S as bt,r as Dt,p as kt}from"../../preset_utils-Bx_qPZZK.chunk.js";import{B as vt}from"../../sim-DE7bY1yd.chunk.js";import{E as Ct}from"../../sim-DyAQuQ2j.chunk.js";import{E as wt}from"../../sim-BIKZr9px.chunk.js";import{F as Tt}from"../../sim-CNXIZ4HY.chunk.js";import{F as Rt}from"../../sim-nyoih2N4.chunk.js";import{H as Ut}from"../../sim-CYCJVF-o.chunk.js";import{H as xt}from"../../sim-CxfQrXzP.chunk.js";import{H as Lt}from"../../sim-DmBHNQk4.chunk.js";import{M as At}from"../../sim-Cv3VbtiZ.chunk.js";import{P as Ot}from"../../sim-D-MML7-m.chunk.js";import{R as Bt}from"../../sim-X-IaD_ur.chunk.js";import{R as Wt}from"../../sim-CCNool_X.chunk.js";import{R as Ft}from"../../sim-BYsdx-Nt.chunk.js";import{R as Mt}from"../../sim-pRnNzsxG.chunk.js";import{S as Ht}from"../../sim-CVLHwK0z.chunk.js";import{T as $t}from"../../sim-CWD9SDqx.chunk.js";import{W as jt}from"../../sim-B0Lj6LX2.chunk.js";import{W as Nt}from"../../sim-BODHJ1WK.chunk.js";import{W as qt}from"../../sim-SChfwZJq.chunk.js";import"../../warrior_inputs-DV9G6E_4.chunk.js";const Vt={[e.SpecBalanceDruid]:(t,e)=>new vt(t,e),[e.SpecFeralDruid]:(t,e)=>new Tt(t,e),[e.SpecFeralTankDruid]:(t,e)=>new Rt(t,e),[e.SpecRestorationDruid]:(t,e)=>new Bt(t,e),[e.SpecElementalShaman]:(t,e)=>new Ct(t,e),[e.SpecEnhancementShaman]:(t,e)=>new wt(t,e),[e.SpecRestorationShaman]:(t,e)=>new Wt(t,e),[e.SpecWardenShaman]:(t,e)=>new jt(t,e),[e.SpecHunter]:(t,e)=>new Lt(t,e),[e.SpecMage]:(t,e)=>new At(t,e),[e.SpecRogue]:(t,e)=>new Mt(t,e),[e.SpecHolyPaladin]:(t,e)=>new xt(t,e),[e.SpecProtectionPaladin]:(t,e)=>new Ot(t,e),[e.SpecRetributionPaladin]:(t,e)=>new Ft(t,e),[e.SpecHealingPriest]:(t,e)=>new Ut(t,e),[e.SpecShadowPriest]:(t,e)=>new Ht(t,e),[e.SpecWarrior]:(t,e)=>new qt(t,e),[e.SpecTankWarrior]:(t,e)=>new $t(t,e),[e.SpecWarlock]:(t,e)=>new Nt(t,e)},zt=a.map(nt).map((t=>t.raidSimPresets)).flat(),Jt=[...new Set(zt.map((t=>t.spec)))];class Gt extends lt{constructor(t,e,a){super(t,a),this.simUI=e}}class Kt extends Gt{constructor(t,e){super(t,e,{title:"JSON Export",allowDownload:!0})}getData(){return JSON.stringify(s.toJson(this.simUI.toProto()),null,2)}}class _t extends ot{constructor(t,e,a){super(t,a),this.simUI=e}}class Xt extends _t{constructor(t,e){super(t,e,{title:"JSON Import",allowFileUpload:!0}),this.descriptionElem.appendChild(i(r,null,i("p",null,"Import settings from a JSON text file, which can be created using the JSON Export feature of this site."),i("p",null,"To import, paste the JSON text below and click, 'Import'.")))}async onImport(t){const e=s.fromJsonString(t,{ignoreUnknownFields:!0});this.simUI.fromProto(n.nextEventID(),e),this.close()}}class Qt{constructor(t,e,a){this.raidIndex=-1,this.inferredProfessions=[],this.playersInParty=[],this.simUI=e,this.data=t,this.name=t.name,this.id=t.id,this.type=t.type;const s=t.icon.split("-")[1];this.fullType=this.type+s,console.log(`WCL spec: ${this.fullType}`);const i=Zt[this.fullType]??null;if(null==i)throw new Error("Player type not implemented: "+this.fullType);if(this.spec=i,this.player=new ht(this.spec,e.sim),this.preset=Qt.getMatchingPreset(i,t.talents),void 0===this.preset)throw new Error("Could not find matching preset: "+JSON.stringify({name:this.name,type:this.fullType,talents:t.talents}).toString());this.player.applySharedDefaults(a),this.player.setTalentsString(a,this.preset.talents.talentsString),this.player.setConsumes(a,this.preset.consumes),this.player.setSpecOptions(a,this.preset.specOptions),this.player.setProfessions(a,[o.Engineering,o.Enchanting]),this.player.setName(a,t.name),this.player.setGear(a,e.sim.db.lookupEquipmentSpec(D.create({items:t.gear.map((t=>k.create({id:t.id,enchant:t.permanentEnchant})))})))}static getMatchingPreset(t,e){const a=zt.filter((e=>e.spec==t));let s=0;if(a&&a.length>1){let t=999;a.forEach(((a,i)=>{const r=v(a.talents.talentsString),n=r.reduce(((t,a,s)=>t+Math.abs(e[s]?.guid-r[s])),0);n<t&&(s=i,t=n)}))}return a[s]}toUnitReference(){return C.create({type:w.Player,index:this.raidIndex})}addPlayerInParty(t){return t!=this&&!this.playersInParty.includes(t)&&(this.playersInParty.push(t),!0)}}const Zt={DruidBalance:e.SpecBalanceDruid,DruidFeral:e.SpecFeralDruid,DruidWarden:e.SpecFeralTankDruid,DruidGuardian:e.SpecFeralTankDruid,DruidRestoration:e.SpecRestorationDruid,HunterBeastMastery:e.SpecHunter,HunterSurvival:e.SpecHunter,HunterMarksmanship:e.SpecHunter,MageArcane:e.SpecMage,MageFire:e.SpecMage,MageFrost:e.SpecMage,PaladinHoly:e.SpecHolyPaladin,PaladinJusticar:e.SpecProtectionPaladin,PaladinProtection:e.SpecProtectionPaladin,PaladinRetribution:e.SpecRetributionPaladin,PriestHoly:e.SpecHealingPriest,PriestDiscipline:e.SpecHealingPriest,PriestShadow:e.SpecShadowPriest,RogueAssassination:e.SpecRogue,RogueCombat:e.SpecRogue,RogueSubtlety:e.SpecRogue,ShamanElemental:e.SpecElementalShaman,ShamanEnhancement:e.SpecEnhancementShaman,ShamanRestoration:e.SpecRestorationShaman,WarlockDestruction:e.SpecWarlock,WarlockAffliction:e.SpecWarlock,WarlockDemonology:e.SpecWarlock,WarriorArms:e.SpecWarrior,WarriorFury:e.SpecWarrior,WarriorChampion:e.SpecWarrior,WarriorWarrior:e.SpecWarrior,WarriorGladiator:e.SpecWarrior,WarriorProtection:e.SpecTankWarrior},Yt=[{id:26297,name:"Berserking",race:l.RaceTroll},{id:20572,name:"Blood Fury (AP)",race:l.RaceOrc},{id:20589,name:"Escape Artist",race:l.RaceGnome},{id:20594,name:"Stoneform",race:l.RaceDwarf},{id:20549,name:"War Stomp",race:l.RaceTauren},{id:7744,name:"Will of the Forsaken",race:l.RaceUndead},{id:59752,name:"Will to Survive",race:l.RaceHuman}],te=[{id:55503,name:"Lifeblood",profession:o.Herbalism},{id:50305,name:"Skinning",profession:o.Skinning}],ee=[{id:29166,name:"Innervate",class:c.ClassDruid,applyFunc:(t,e)=>{const a=t.getSpecOptions();return a.innervateTarget=e,a}},{id:10060,name:"Power Infusion",class:c.ClassPriest,applyFunc:(t,e)=>{const a=t.getSpecOptions();return a.powerInfusionTarget=e,a}}],ae=[{id:52042,name:"Healing Stream Totem"},{id:48076,name:"Holy Nova"},{id:48445,name:"Tranquility"},{id:15290,name:"Vampiric Embrace"}],se=[{id:48072,name:"Prayer of Healing"}];class ie extends _t{constructor(t,e){super(t,e,{title:"WCL Import",allowFileUpload:!1}),this.queryCounter=0,this.token="",this.textElem.classList.add("small-textarea"),this.descriptionElem.appendChild(i(r,null,i("p",null,"Imports the entire raid from a WCL report."),i("p",null,"To import, paste the WCL report and fight link (https://classic.warcraftlogs.com/reports/REPORTID#fight=FIGHTID).",i("br",null),"Include the fight ID or else the first fight in the report will be used."),i("p",null,"The following are imported directly from the report:",i("ul",null,i("li",null,"Player Name"),i("li",null,"Equipment (items, enchants, and gems)"),i("li",null,"Faction (Alliance / Horde)"),i("li",null,"Encounter: If the import link has a fight ID we try to match with a preset Encounter. Note that many Encounters are still unimplemented.")),"The following are not available directly from the report data, but we try to infer them:",i("ul",null,i("li",null,"Talents: Log data only gives us the tree summary (e.g. '51/20/0') so we match this with the closest preset talent build."),i("li",null,"Glyphs: Glyphs are absent from log data, but we pair them with the inferred Talents."),i("li",null,"Race: Inferred from Race-specific abilties used in any fight if possible, or defaults to Spec-specific Race."),i("li",null,"Professions: Inferred from profession-locked items/enchants/gems."),i("li",null,"Buff assignments (Innervate, Unholy Frenzy, etc): Inferred from casts."),i("li",null,"Party Composition: Inferred from party-only effects, such as Prayer of Healing, or Vampiric Touch.")),"The following are not imported, and instead use spec-specific defaults:",i("ul",null,i("li",null,"Rotation / Spec-specific options"),i("li",null,"Consumes"),i("li",null,"Paladin Blessings")))))}async getWCLBearerToken(){if(""==this.token){const t=await fetch("https://classic.warcraftlogs.com/oauth/token",{method:"POST",headers:{Authorization:"Basic "+btoa("963d31c8-7efa-4dde-87cf-1b254a8a2f8c:lRJVhujEEnF96xfUoxVHSpnqKN9v8bTqGEjutsO3")},body:new URLSearchParams({grant_type:"client_credentials"})}),e=await t.json();this.token=e.access_token}return this.token}async queryWCL(t){const e={"Content-Type":"application/json",Authorization:`Bearer ${await this.getWCLBearerToken()}`,Accept:"application/json"},a=`https://classic.warcraftlogs.com/api/v2/client?query=${t}`;this.queryCounter++;const s=await fetch(encodeURI(a),{method:"GET",headers:e}),i=await s.json();if(i?.errors?.length){const e=i.errors.map((t=>t.message)).join("\n");throw new Error(`GraphQL error: ${e}\n\nQuery: ${t}`)}return console.debug(`WCL query: ${t}\n\nResult: ${JSON.stringify(i)}`),i}async parseURL(t){const e=t.match(/classic\.warcraftlogs\.com\/reports\/([a-zA-Z0-9:]+)\/?(#.*fight=((\d+)|(last)))?/);if(!e)throw new Error(`Invalid WCL URL ${t}, must look like "classic.warcraftlogs.com/reports/XXXX"`);const a={reportID:e[1],fightID:""};if(e[2]&&e[3]&&"last"!=e[3])a.fightID=e[3];else{const t=`{\n                reportData {\n                    report(code: "${a.reportID}") {\n                        fights(killType: Kills, translate: true) {\n                            id, name\n                        }\n                    }\n                }\n            }`,s=(await this.queryWCL(t)).data.reportData.report.fights;"last"==e[3]?a.fightID=String(s[s.length-1].id):a.fightID=String(s[0].id)}return console.debug(`Importing WCL report: ${JSON.stringify(a)}`),a}async getRateLimit(){return(await this.queryWCL("{\n        rateLimitData {\n          limitPerHour, pointsSpentThisHour, pointsResetIn\n        }\n      }")).data.rateLimitData}async onImport(t){this.importButton.disabled=!0,this.rootElem.style.cursor="wait";try{await this.doImport(t)}catch(e){console.error(e),alert("Failed import from WCL: "+e)}this.importButton.disabled=!1,this.rootElem.style.removeProperty("cursor")}async doImport(t){if(!t.length)throw new Error("No import link provided!");const e=await this.parseURL(t);await this.getRateLimit();const a=`{\n            reportData {\n                report(code: "${e.reportID}") {\n                    guild {\n                        name faction {id}\n                    }\n                    playerDetails: table(fightIDs: [${e.fightID}], dataType: Casts, killType: All, viewBy: Default)\n                    combatantInfoEvents: events(fightIDs: [${e.fightID}], dataType:CombatantInfo, limit: 50) { data }\n                    fights(fightIDs: [${e.fightID}]) {\n                        startTime, endTime, id, name\n                    }\n\n                    reportCastEvents: events(dataType:Casts, endTime: 99999999, filterExpression: "${[Yt,te].flat().map((t=>t.id)).map((t=>`ability.id = ${t}`)).join(" OR ")}", limit: 10000) { data }\n\n                    fightCastEvents: events(fightIDs: [${e.fightID}], dataType:Casts, filterExpression: "${[ee].flat().map((t=>t.id)).map((t=>`ability.id = ${t}`)).join(" OR ")}", limit: 10000) { data }\n\n                    fightHealEvents: events(fightIDs: [${e.fightID}], dataType:Healing, filterExpression: "${[ae,se].flat().map((t=>t.id)).map((t=>`ability.id = ${t}`)).join(" OR ")}", limit: 10000) { data }\n\n                    manaTideTotem: events(fightIDs: [${e.fightID}], dataType:Resources, filterExpression: "ability.id = 39609", limit: 100) { data }\n                }\n            }\n        }`,i=(await this.queryWCL(a)).data.reportData.report,r=i.playerDetails.data.entries;n.freezeAllAndDo((()=>{const t=n.nextEventID(),e=r.map((e=>new Qt(e,this.simUI,t)));this.inferRace(t,i,e),this.inferProfessions(t,i,e),this.inferAssignments(t,i,e),this.inferPartyComposition(t,i,e);const a=e.filter((t=>t.player.getClass()==c.ClassPaladin)).length,l=s.create({encounter:this.getEncounterProto(i),raid:this.getRaidProto(e),blessings:d(a)});this.simUI.clearRaid(t),this.simUI.fromProto(t,l)})),this.close()}inferRace(t,e,a){a.forEach((e=>e.player.setRace(t,l.RaceUnknown)));let s=e.guild?.faction?.id||this.simUI.raidPicker?.getCurrentFaction()||h.Horde;const i=m(e.reportCastEvents.data,(t=>String(t.abilityGameID)));Yt.forEach((e=>{(i[e.id]||[]).forEach((i=>{const r=a.find((t=>t.id==i.sourceID));r&&(console.log(`Inferring player ${r.name} has race ${p.get(e.race)} from ${e.name} event`),r.player.setRace(t,e.race),s=u[e.race])}))})),a.forEach((e=>{e.player.getRace()==l.RaceUnknown&&e.player.setRace(t,e.preset.defaultFactionRaces[s])}))}inferProfessions(t,e,a){const s=m(e.reportCastEvents.data,(t=>String(t.abilityGameID)));te.forEach((t=>{(s[t.id]||[]).forEach((e=>{const s=a.find((t=>t.id==e.sourceID));s&&!s.inferredProfessions.includes(t.profession)&&(console.log(`Inferring player ${s.name} has profession ${g.get(t.profession)} from ${t.name} event`),s.inferredProfessions.push(t.profession))}))})),a.forEach((e=>{let a=f(e.inferredProfessions.concat(e.player.getGear().getProfessionRequirements()));0==a.length?a=[o.Engineering,o.Enchanting]:1==a.length&&(a[0]!=o.Engineering?a.push(o.Engineering):a.push(o.Enchanting)),e.player.setProfessions(t,a)}))}inferAssignments(t,e,a){const s=m(e.fightCastEvents.data,(t=>String(t.abilityGameID)));ee.forEach((e=>{(s[e.id]||[]).forEach((s=>{const i=a.find((t=>t.id==s.sourceID)),r=a.find((t=>t.id==s.targetID));if(i&&r&&i.player.getClass()==e.class){const a=e.applyFunc(i.player,r.toUnitReference());i.player.setSpecOptions(t,a),console.log(`Inferring player ${i.name} is targeting ${r.name} with ${e.name} from cast event`)}}))}))}inferPartyComposition(t,e,a){const s=(t,e,a)=>{(t.addPlayerInParty(e)||e.addPlayerInParty(t))&&console.log(`Inferring players ${t.name} and ${e.name} in same party from ${a} event`)},i=m(e.fightHealEvents.data,(t=>String(t.abilityGameID)));ae.forEach((t=>{(i[t.id]||[]).forEach((e=>{const i=a.find((t=>t.id==e.sourceID)),r=a.find((t=>t.id==e.targetID));i&&r&&s(i,r,t.name)}))})),se.forEach((t=>{const e=i[t.id]||[],r=m(e,(t=>String(t.timestamp)+String(t.sourceID)));for(const[i,n]of Object.entries(r)){const e=n.map((t=>a.find((e=>e.id==t.targetID))));for(let a=0;a<e.length;a++)for(let i=0;i<e.length;i++)a!=i&&e[a]&&e[i]&&s(e[a],e[i],t.name)}})),e.combatantInfoEvents.data.forEach((t=>{const e=a.find((e=>e.id==t.sourceID));t.auras.filter((t=>28878==t.ability)).forEach((t=>{const i=a.find((e=>e.id==t.source));i&&e&&s(i,e,"Heroic Presence")}))}));let r=a.filter((t=>t.playersInParty.length>0)),n=0;for(;r.length>0;){let t=[r[0]].concat(r[0].playersInParty),e=0;for(;t.length!=e;)e=t.length,t=f(t.map((t=>[t].concat(t.playersInParty))).flat());const a=n;n++,t.forEach(((t,e)=>{t.raidIndex=5*a+e})),r=r.filter((e=>!t.includes(e)))}const l=[...Array(40).keys()];a.filter((t=>-1==t.raidIndex)).forEach((t=>{const e=l.find((t=>!a.some((e=>e.raidIndex==t))))??-1;if(-1==e)throw new Error("Invalid next idx");t.raidIndex=e}))}getEncounterProto(t){const e=t.fights[0],a=y.create({duration:(e.endTime-e.startTime)/1e3,targets:[]}),s=this.simUI.sim.db.getAllPresetEncounters().find((t=>t.path.includes(e.name)));return s&&s.targets.length&&s.targets.map((t=>t.target)).filter((t=>void 0!==t)).forEach((t=>a.targets.push(t))),0===a.targets.length&&a.targets.push(ct.getDefaultTarget(this.simUI.sim).target),a}getRaidProto(t){const e=I.create({parties:[...new Array(dt).keys()].map((()=>P.create({players:[...new Array(5).keys()].map((()=>E.create()))})))});return t.forEach((t=>{const a=t.raidIndex%5,s=(t.raidIndex-a)/5,i=t.player.toProto();e.parties[s].players[a]=i,S(b(i))&&e.tanks.push(t.toUnitReference())})),e}}const re=-1;class ne extends T{constructor(t,e){super(t,"raid-picker-root"),this.currentDragPlayer=null,this.currentDragPlayerFromIndex=re,this.currentDragType=1,this.currentDragParty=null,this.raidSimUI=e,this.raid=e.sim.raid;const a=document.createElement("div");a.classList.add("raid-controls"),this.rootElem.appendChild(a),this.newPlayerPicker=new de(this.rootElem,this),this.playerEditorModal=new ce,new mt(a,this.raidSimUI.sim.raid,{id:"raid-picker-size",label:"Raid Size",labelTooltip:"Number of players participating in the sim.",values:[{name:"5",value:1},{name:"10",value:2},{name:"25",value:5},{name:"40",value:8}],changedEvent:t=>t.numActivePartiesChangeEmitter,getValue:t=>t.getNumActiveParties(),setValue:(t,e,a)=>{e.setNumActiveParties(t,a)}}),new mt(a,this.newPlayerPicker,{id:"raid-picker-faction",label:"Default Faction",labelTooltip:"Default faction for newly-created players.",values:[{name:"Alliance",value:h.Alliance},{name:"Horde",value:h.Horde}],changedEvent:()=>this.raid.sim.factionChangeEmitter,getValue:()=>this.raid.sim.getFaction(),setValue:(t,e,a)=>{this.raid.sim.setFaction(t,a)}});const s=Math.min(...zt.map((t=>Math.max(...Object.keys(t.defaultGear[h.Alliance]).map((t=>parseInt(t)))))));new mt(a,this.newPlayerPicker,{id:"raid-picker-gear",label:"Default Gear",labelTooltip:"Newly-created players will start with approximate BIS gear from this phase.",values:[...Array(s).keys()].map((t=>{const e=t+1;return{name:"Phase "+e,value:e}})),changedEvent:()=>this.raid.sim.phaseChangeEmitter,getValue:()=>this.raid.sim.getPhase(),setValue:(t,e,a)=>{this.raid.sim.setPhase(t,a)}});const i=document.createElement("div");i.classList.add("parties-container"),this.rootElem.appendChild(i),this.partyPickers=this.raid.getParties().map(((t,e)=>new le(i,t,e,this)));const r=()=>{this.partyPickers.forEach((t=>{t.index<this.raidSimUI.sim.raid.getNumActiveParties()?t.rootElem.classList.add("active"):t.rootElem.classList.remove("active")}))};this.raidSimUI.sim.raid.numActivePartiesChangeEmitter.on(r),r(),this.rootElem.ondragend=()=>{this.clearDragPlayer(),this.clearDragParty()}}getCurrentFaction(){return this.raid.sim.getFaction()}getCurrentPhase(){return this.raid.sim.getPhase()}getPlayerPicker(t){return this.partyPickers[Math.floor(t/pt)].playerPickers[t%pt]}getPlayerPickers(){return[...new Array(25).keys()].map((t=>this.getPlayerPicker(t)))}setDragPlayer(t,e,a){if(this.clearDragPlayer(),this.currentDragPlayer=t,this.currentDragPlayerFromIndex=e,this.currentDragType=a,e!=re){this.getPlayerPicker(e).rootElem.classList.add("dragfrom")}}clearDragPlayer(){if(this.currentDragPlayerFromIndex!=re){this.getPlayerPicker(this.currentDragPlayerFromIndex).rootElem.classList.remove("dragfrom")}this.currentDragPlayer=null,this.currentDragPlayerFromIndex=re,this.currentDragType=1}setDragParty(t){this.currentDragParty=t,t.rootElem.classList.add("dragfrom")}clearDragParty(){this.currentDragParty&&(this.currentDragParty.rootElem.classList.remove("dragfrom"),this.currentDragParty=null)}}class le extends T{constructor(t,e,a,s){super(t,"party-picker-root"),this.party=e,this.index=a,this.raidPicker=s,this.rootElem.setAttribute("draggable","true"),this.rootElem.innerHTML=`\n\t\t\t<div class="party-header">\n\t\t\t\t<label class="party-label form-label">Group ${a+1}</label>\n\t\t\t\t<div class="party-results">\n\t\t\t\t\t<span class="party-results-dps"></span>\n\t\t\t\t\t<span class="party-results-reference-delta"></span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class="players-container">\n\t\t\t</div>\n\t\t`;const i=this.rootElem.getElementsByClassName("players-container")[0];this.playerPickers=[...Array(pt).keys()].map((t=>new oe(i,this,t)));const r=this.rootElem.getElementsByClassName("party-results-dps")[0],l=this.rootElem.getElementsByClassName("party-results-reference-delta")[0];this.raidPicker.raidSimUI.referenceChangeEmitter.on((()=>{const t=this.raidPicker.raidSimUI.getCurrentData(),e=this.raidPicker.raidSimUI.getReferenceData(),a=t?.simResult.raidMetrics.parties[this.index]?.dps.avg||0,s=e?.simResult.raidMetrics.parties[this.index]?.dps.avg||0;if(0==a&&0==s)return r.textContent="",void(l.textContent="");r.textContent=`${a.toFixed(1)} DPS`,e?R(l,s,a,1):l.textContent=""})),this.rootElem.ondragstart=t=>{t.target==this.rootElem&&(t.dataTransfer.dropEffect="move",t.dataTransfer.effectAllowed="all",this.raidPicker.setDragParty(this))};let o=0;this.rootElem.ondragenter=t=>{t.preventDefault(),this.raidPicker.currentDragParty&&(o++,this.rootElem.classList.add("dragto"))},this.rootElem.ondragleave=t=>{t.preventDefault(),this.raidPicker.currentDragParty&&(o--,o<=0&&this.rootElem.classList.remove("dragto"))},this.rootElem.ondragover=t=>{t.preventDefault()},this.rootElem.ondrop=t=>{if(!this.raidPicker.currentDragParty)return;t.preventDefault(),o=0,this.rootElem.classList.remove("dragto");const e=n.nextEventID();n.freezeAllAndDo((()=>{const t=this.raidPicker.currentDragParty;for(let a=0;a<pt;a++){const s=t.playerPickers[a],i=this.playerPickers[a],r=s.player,n=i.player;s.setPlayer(e,n,3),i.setPlayer(e,r,3)}})),this.raidPicker.clearDragParty()}}}class oe extends T{constructor(t,e,a){super(t,"player-picker-root"),this.abortController=new AbortController,this.signal=this.abortController.signal,this.index=a,this.raidIndex=e.index*pt+a,this.player=null,this.partyPicker=e,this.raidPicker=e.raidPicker,this.labelElem=null,this.iconElem=null,this.nameElem=null,this.resultsElem=null,this.dpsResultElem=null,this.referenceDeltaElem=null,this.rootElem.classList.add("player"),this.partyPicker.party.compChangeEmitter.on((t=>{const e=this.partyPicker.party.getPlayer(this.index);e!=this.player&&this.setPlayer(t,e,0)})),this.raidPicker.raidSimUI.referenceChangeEmitter.on((()=>{const t=this.raidPicker.raidSimUI.getCurrentData(),e=this.raidPicker.raidSimUI.getReferenceData(),a=t?.simResult.getPlayerWithRaidIndex(this.raidIndex)?.dps.avg||0,s=e?.simResult.getPlayerWithRaidIndex(this.raidIndex)?.dps.avg||0;this.player&&(this.resultsElem?.classList.remove("hide"),this.dpsResultElem.textContent=`${a.toFixed(1)} DPS`,e&&R(this.referenceDeltaElem,s,a,1))}));let s=0;this.rootElem.ondragenter=t=>{t.preventDefault(),this.raidPicker.currentDragParty||(s++,this.rootElem.classList.add("dragto"))},this.rootElem.ondragleave=t=>{t.preventDefault(),this.raidPicker.currentDragParty||(s--,s<=0&&this.rootElem.classList.remove("dragto"))},this.rootElem.ondragover=t=>t.preventDefault(),this.rootElem.ondrop=t=>{if(this.raidPicker.currentDragParty)return;const e=t.dataTransfer.getData("text/plain");t.preventDefault(),s=0,this.rootElem.classList.remove("dragto");const a=n.nextEventID();n.freezeAllAndDo((()=>{if(null==this.raidPicker.currentDragPlayer&&0==e.length)return;if(this.raidPicker.currentDragPlayerFromIndex==this.raidIndex)return void this.raidPicker.clearDragPlayer();const t=this.raidPicker.currentDragType;if(this.raidPicker.currentDragPlayerFromIndex!=re){const e=this.raidPicker.getPlayerPicker(this.raidPicker.currentDragPlayerFromIndex);3==t?e.setPlayer(a,this.player,t):2==t&&e.setPlayer(a,null,t)}else if(null==this.raidPicker.currentDragPlayer){const t=atob(e),s=new Uint8Array(t.length);for(let e=0;e<s.length;e++)s[e]=t.charCodeAt(e);const i=U.fromBinary(s),r=new ht(b(i),this.raidPicker.raidSimUI.sim);r.fromProto(a,i),this.raidPicker.currentDragPlayer=r}4==t?this.setPlayer(a,this.raidPicker.currentDragPlayer.clone(a),t):this.setPlayer(a,this.raidPicker.currentDragPlayer,t),this.raidPicker.clearDragPlayer()}))},this.update()}setPlayer(t,a,s){a!=this.player&&(n.freezeAllAndDo((()=>{this.player=a,a?(this.partyPicker.party.setPlayer(t,this.index,a),1==s&&function(t,a,s){if(S(a.spec)){const e=s.getTanks(),i=e.findIndex((t=>null==s.getPlayerFromUnitReference(t)));-1==i?e.length<3&&s.setTanks(t,e.concat([a.makeUnitReference()])):(e[i]=a.makeUnitReference(),s.setTanks(t,e))}if(a.spec==e.SpecBalanceDruid){const e=a.getSpecOptions();e.innervateTarget=O(a.getRaidIndex()),a.setSpecOptions(t,e)}}(t,a,this.raidPicker.raid)):(this.partyPicker.party.setPlayer(t,this.index,a),this.partyPicker.party.compChangeEmitter.emit(t))})),this.update())}update(){if(null==this.player)this.rootElem.className="player-picker-root player",this.rootElem.innerHTML="",this.labelElem=null,this.iconElem=null,this.nameElem=null,this.resultsElem=null,this.dpsResultElem=null,this.referenceDeltaElem=null;else{const t=x(this.player.getClass());this.rootElem.className=`player-picker-root player bg-${t}-dampened`,this.rootElem.innerHTML=`\n\t\t\t\t<div class="player-label">\n\t\t\t\t\t<img class="player-icon" src="${this.player.getSpecIcon()}" draggable="true" />\n\t\t\t\t\t<div class="player-details">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclass="player-name text-${t}"\n\t\t\t\t\t\t\ttype="text"\n\t\t\t\t\t\t\tvalue="${this.player.getName()}"\n\t\t\t\t\t\t\tspellcheck="false"\n\t\t\t\t\t\t\tmaxlength="15"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div class="player-results hide">\n\t\t\t\t\t\t\t<span class="player-results-dps"></span>\n\t\t\t\t\t\t\t<span class="player-results-reference-delta"></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class="player-options">\n\t\t\t\t\t<a\n\t\t\t\t\t\thref="javascript:void(0)"\n\t\t\t\t\t\tclass="player-edit"\n\t\t\t\t\t\trole="button"\n\t\t\t\t\t\tdata-tippy-content="Click to Edit"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class="fa fa-edit fa-lg"></i>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a\n\t\t\t\t\t\thref="javascript:void(0)"\n\t\t\t\t\t\tclass="player-copy link-warning"\n\t\t\t\t\t\trole="button"\n\t\t\t\t\t\tdraggable="true"\n\t\t\t\t\t\tdata-tippy-content="Drag to Copy"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class="fa fa-copy fa-lg"></i>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a\n\t\t\t\t\t\thref="javascript:void(0)"\n\t\t\t\t\t\tclass="player-delete link-danger"\n\t\t\t\t\t\trole="button"\n\t\t\t\t\t\tdata-tippy-content="Click to Delete"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class="fa fa-times fa-lg"></i>\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t`,this.labelElem=this.rootElem.querySelector(".player-label"),this.iconElem=this.rootElem.querySelector(".player-icon"),this.nameElem=this.rootElem.querySelector(".player-name"),this.resultsElem=this.rootElem.querySelector(".player-results"),this.dpsResultElem=this.rootElem.querySelector(".player-results-dps"),this.referenceDeltaElem=this.rootElem.querySelector(".player-results-reference-delta"),this.bindPlayerEvents()}}bindPlayerEvents(){this.nameElem?.addEventListener("input",(t=>{this.player?.setName(n.nextEventID(),this.nameElem?.value||"")})),this.nameElem?.addEventListener("mousedown",(t=>{this.partyPicker.rootElem.setAttribute("draggable","false")})),this.nameElem?.addEventListener("mouseup",(t=>{this.partyPicker.rootElem.setAttribute("draggable","true")}));const e="Unnamed";this.nameElem?.addEventListener("focusout",(t=>{this.nameElem&&!this.nameElem.value&&(this.nameElem.value=e,this.player?.setName(n.nextEventID(),e))}));const a=(t,e)=>{if(null!=this.player){if(t.dataTransfer.dropEffect="move",t.dataTransfer.effectAllowed="all",this.player){const e=this.player.toProto(!0);t.dataTransfer.setData("text/plain",btoa(String.fromCharCode(...U.toBinary(e))))}this.raidPicker.setDragPlayer(this.player,this.raidIndex,e)}else t.preventDefault()},s=this.rootElem.querySelector(".player-edit"),i=this.rootElem.querySelector(".player-copy"),r=this.rootElem.querySelector(".player-delete"),l=t(s),o=t(i),c=t(r);this.iconElem?.addEventListener("dragstart",(t=>{t.dataTransfer.setDragImage(this.rootElem,20,20),a(t,3)}),{signal:this.signal});s.addEventListener("click",(()=>{this.player&&this.raidPicker.playerEditorModal.openEditor(this.player)}),{signal:this.signal});i.addEventListener("dragstart",(t=>{t.dataTransfer.setDragImage(this.rootElem,20,20),a(t,4)}),{signal:this.signal});r.addEventListener("click",(()=>{this.setPlayer(n.nextEventID(),null,0),this.dispose()}),{signal:this.signal}),this.addOnDisposeCallback((()=>{l?.destroy(),o?.destroy(),c?.destroy()}))}}class ce extends ut{constructor(){super(document.body,"player-editor-modal",{closeButton:{fixed:!0},header:!1,disposeOnClose:!1});const t=B(),e=i("div",{ref:t,className:"player-editor within-raid-sim"});this.rootElem.id="playerEditorModal",this.body.appendChild(e),this.playerEditorRoot=t.value}openEditor(t){this.setData(t),super.open()}setData(t){this.playerEditorRoot.innerHTML="",Vt[t.spec]?.(this.playerEditorRoot,t)}}class de extends T{constructor(e,a){super(e,"new-player-picker-root"),this.raidPicker=a,L(c).forEach((e=>{if(e==c.ClassUnknown)return;const a=zt.filter((t=>A[t.spec]==e));if(0==a.length)return;const s=document.createElement("div");s.classList.add("class-presets-container",`bg-${x(e)}-dampened`),this.rootElem.appendChild(s),a.forEach((e=>{const a=document.createElement("fragment");a.innerHTML=`\n\t\t\t\t\t<a\n\t\t\t\t\t\thref="javascript:void(0)"\n\t\t\t\t\t\trole="button"\n\t\t\t\t\t\tdraggable="true"\n\t\t\t\t\t\tdata-tippy-content="${e.tooltip}"\n\t\t\t\t\t>\n\t\t\t\t\t\t<img class="preset-picker-icon player-icon" src="${e.iconUrl}"/>\n\t\t\t\t\t</a>\n\t\t\t\t`;const i=a.children[0];s.appendChild(i),t(i),i.ondragstart=t=>{const a=n.nextEventID();n.freezeAllAndDo((()=>{const s=new Image;s.src=e.iconUrl,t.dataTransfer.setDragImage(s,30,30),t.dataTransfer.setData("text/plain",""),t.dataTransfer.dropEffect="copy";const i=new ht(e.spec,this.raidPicker.raid.sim);i.applySharedDefaults(a),i.setRace(a,e.defaultFactionRaces[this.raidPicker.getCurrentFaction()]),i.setTalentsString(a,e.talents.talentsString),i.setSpecOptions(a,e.specOptions),i.setConsumes(a,e.consumes),i.setName(a,e.defaultName),i.setProfession1(a,e.otherDefaults?.profession1||o.Engineering),i.setProfession2(a,e.otherDefaults?.profession2||o.Enchanting),i.setDistanceFromTarget(a,e.otherDefaults?.distanceFromTarget||0),this.raidPicker.raid.sim.waitForInit().then((()=>{i.setGear(a,this.raidPicker.raid.sim.db.lookupEquipmentSpec(e.defaultGear[this.raidPicker.getCurrentFaction()][this.raidPicker.getCurrentPhase()]))})),this.raidPicker.setDragPlayer(i,re,1)}))}}))}))}}class he extends T{constructor(t,e){super(t,"raid-stats");const a=[];be.sections.forEach((t=>{const s=document.createElement("div");s.classList.add("raid-stats-section"),this.rootElem.appendChild(s),s.innerHTML=`\n\t\t\t\t<div class="raid-stats-section-header">\n\t\t\t\t\t<label class="raid-stats-section-label form-label">${t.label}</label>\n\t\t\t\t</div>\n\t\t\t\t<div class="raid-stats-section-content"></div>\n\t\t\t`;const i=s.getElementsByClassName("raid-stats-section-content")[0];t.categories.forEach((t=>{a.push(new me(i,e,t))}))})),this.categories=a,e.changeEmitter.on((t=>this.categories.forEach((t=>t.update()))))}}class me extends T{constructor(e,a,s){super(e,"raid-stats-category-root"),this.raidSimUI=a,this.options=s;const r=B(),n=B();if(this.rootElem.appendChild(i("a",{ref:n,href:"javascript:void(0)",className:"raid-stats-category",attributes:{role:"button"}},i("span",{ref:r,className:"raid-stats-category-counter"}),i("span",{className:"raid-stats-category-label"},s.label))),this.counterElem=r.value,this.tooltipElem=i("div",null,i("label",{className:"raid-stats-category-label"},s.label)),this.effects=s.effects.map((t=>new pe(this.tooltipElem,a,t))),1!=s.effects.length||s.effects[0].playerData?.class){const e=n.value;t(e,{theme:"raid-stats-category-tooltip",placement:"right",content:this.tooltipElem})}}update(){this.effects.forEach((t=>t.update()));const t=z(this.effects.map((t=>t.count)));this.counterElem.textContent=String(t);const e=this.rootElem.querySelector(".raid-stats-category");0==t?e?.classList.remove("active"):e?.classList.add("active")}}class pe extends T{constructor(t,e,a){super(t,"raid-stats-effect"),this.raidSimUI=e,this.options=a,this.curPlayers=[],this.count=0;const s=B(),n=B(),l=B();if(this.rootElem.appendChild(i(r,null,i("span",{ref:s,className:"raid-stats-effect-counter"}),i("img",{ref:l,className:"raid-stats-effect-icon"}),i("span",{ref:n,className:"raid-stats-effect-label"},a.label))),this.counterElem=s.value,this.options.playerData?.class){const t=this.rootElem.querySelector(".raid-stats-effect-label"),e=J(this.options.playerData.class);t.classList.add(e)}const o=this.rootElem.querySelector(".raid-stats-effect-icon");a.actionId?a.actionId.fill().then((t=>o.src=t.iconUrl)):o.remove()}update(){this.options.playerData&&(this.curPlayers=this.raidSimUI.getActivePlayers().filter((t=>this.options.playerData.condition(t))));const t=this.options.raidData&&this.options.raidData(this.raidSimUI.sim.raid);this.count=this.curPlayers.length+(t?1:0),this.counterElem.textContent=String(this.count),0==this.count?this.rootElem.classList.remove("active"):this.rootElem.classList.add("active")}}function ue(t,e){return e?!t:t}function ge(t,e){return{class:t,condition:a=>a.isClass(t)&&(!e||e(a))}}function fe(t,e,a,s){return{class:t,condition:i=>i.isClass(t)&&ue(Boolean(i.getTalents()[e]),a)&&(!s||s(i))}}function ye(t,e,a){return fe(t,e,!1,a)}function Ie(t,e,a){return fe(t,e,!0,a)}function Pe(t,e,a,s){return{class:A[t],condition:i=>i.isSpec(t)&&ue(Boolean(i.getTalents()[e]),a)&&(!s||s(i))}}function Ee(t,e,a){return Pe(t,e,!1,a)}function Se(t){return e=>Boolean(e.getBuffs()[t])}const be={sections:[{label:"Roles",categories:[{label:"Tanks",effects:[{label:"Tanks",playerData:{condition:t=>S(t.spec)}}]},{label:"Healers",effects:[{label:"Healers",playerData:{condition:t=>W(t.spec)}}]},{label:"Melee",effects:[{label:"Melee",playerData:{condition:t=>F(t.spec)}}]},{label:"Ranged",effects:[{label:"Ranged",playerData:{condition:t=>M(t.spec)}}]}]},{label:"Buffs",categories:[{label:"Bloodlust",effects:[{label:"Bloodlust",actionId:H.fromSpellId(2825),playerData:ge(c.ClassShaman)}]},{label:"Stats",effects:[{label:"Improved Gift of the Wild",actionId:H.fromSpellId(17051),playerData:ye(c.ClassDruid,"improvedMarkOfTheWild")},{label:"Gift of the Wild",actionId:H.fromSpellId(48470),playerData:Ie(c.ClassDruid,"improvedMarkOfTheWild")}]},{label:"Stats %",effects:[{label:"Blessing of Kings",actionId:H.fromSpellId(25898),playerData:ge(c.ClassPaladin)}]},{label:"Armor",effects:[{label:"Improved Devotion Aura",actionId:H.fromSpellId(20140),playerData:ye(c.ClassPaladin,"improvedDevotionAura",(t=>t.getSpecOptions().aura==N.DevotionAura))},{label:"Devotion Aura",actionId:H.fromSpellId(48942),playerData:Ie(c.ClassPaladin,"improvedDevotionAura",(t=>t.getSpecOptions().aura==N.DevotionAura))},{label:"Scroll of Protection",actionId:H.fromItemId(43468),raidData:Se("scrollOfProtection")}]},{label:"Stamina",effects:[{label:"Improved Power Word Fortitude",actionId:H.fromSpellId(14767),playerData:ye(c.ClassPriest,"improvedPowerWordFortitude")},{label:"Power Word Fortitude",actionId:H.fromSpellId(48161),playerData:Ie(c.ClassPriest,"improvedPowerWordFortitude")},{label:"Scroll of Stamina",actionId:H.fromItemId(37094),raidData:Se("scrollOfStamina")}]},{label:"Str + Agi",effects:[{label:"Scroll of Strength",actionId:H.fromItemId(43466),raidData:Se("scrollOfStrength")},{label:"Scroll of Agility",actionId:H.fromItemId(43464),raidData:Se("scrollOfAgility")}]},{label:"Intellect",effects:[{label:"Arcane Brilliance",actionId:H.fromSpellId(43002),playerData:ge(c.ClassMage)},{label:"Scroll of Intellect",actionId:H.fromItemId(37092),raidData:Se("scrollOfIntellect")}]},{label:"Spirit",effects:[{label:"Divine Spirit",actionId:H.fromSpellId(48073),playerData:ge(c.ClassPriest)},{label:"Scroll of Spirit",actionId:H.fromItemId(10306),raidData:Se("scrollOfSpirit")}]},{label:"Atk Pwr",effects:[{label:"Improved Blessing of Might",actionId:H.fromSpellId(20045),playerData:ge(c.ClassPaladin)},{label:"Blessing of Might",actionId:H.fromSpellId(48934),playerData:ge(c.ClassPaladin)},{label:"Improved Battle Shout",actionId:H.fromSpellId(12861),playerData:ye(c.ClassWarrior,"improvedBattleShout",(t=>t.getSpecOptions().shout==q.WarriorShoutBattle))},{label:"Battle Shout",actionId:H.fromSpellId(47436),playerData:Ie(c.ClassWarrior,"improvedBattleShout",(t=>t.getSpecOptions().shout==q.WarriorShoutBattle))}]},{label:"Atk Pwr %",effects:[{label:"Trueshot Aura",actionId:H.fromSpellId(19506),playerData:ye(c.ClassHunter,"trueshotAura")}]},{label:"Mit %",effects:[{label:"Blessing Of Sanctuary",actionId:H.fromSpellId(25899),playerData:ge(c.ClassPaladin)}]},{label:"MP5",effects:[{label:"Improved Blessing of Wisdom",actionId:H.fromSpellId(20245),playerData:ye(c.ClassPaladin,"improvedBlessingOfWisdom")},{label:"Blessing of Wisdom",actionId:H.fromSpellId(48938),playerData:Ie(c.ClassPaladin,"improvedBlessingOfWisdom")}]},{label:"Melee Crit",effects:[{label:"Leader of the Pack",actionId:H.fromSpellId(17007),playerData:ye(c.ClassDruid,"leaderOfThePack")}]},{label:"Melee Haste",effects:[]},{label:"Spell Crit",effects:[{label:"Moonkin Form",actionId:H.fromSpellId(24907),playerData:Ee(e.SpecBalanceDruid,"moonkinForm")}]},{label:"Health",effects:[{label:"Improved Imp",actionId:H.fromSpellId(18696),playerData:ye(c.ClassWarlock,"improvedImp",(t=>t.getSpecOptions().summon==V.Imp))},{label:"Blood Pact",actionId:H.fromSpellId(47982),playerData:Ie(c.ClassWarlock,"improvedImp",(t=>t.getSpecOptions().summon==V.Imp))}]}]},{label:"External Buffs",categories:[{label:"Innervate",effects:[{label:"Innervate",actionId:H.fromSpellId(29166),playerData:ge(c.ClassDruid)}]},{label:"Power Infusion",effects:[{label:"Power Infusion",actionId:H.fromSpellId(10060),playerData:ye(c.ClassPriest,"powerInfusion")}]}]},{label:"DPS Debuffs",categories:[{label:"Major ArP",effects:[{label:"Sunder Armor",actionId:H.fromSpellId(7386),playerData:ge(c.ClassWarrior)},{label:"Expose Armor",actionId:H.fromSpellId(8647),playerData:ge(c.ClassRogue)}]},{label:"Minor ArP",effects:[{label:"Faerie Fire",actionId:H.fromSpellId(770),playerData:ge(c.ClassDruid,(t=>t.spec!=e.SpecRestorationDruid))},{label:"Spore Cloud",actionId:H.fromSpellId(53598),playerData:ge(c.ClassHunter,(t=>t.getSpecOptions().petType==$.Bat))}]},{label:"Bleed",effects:[{label:"Mangle",actionId:H.fromSpellId(16862),playerData:ge(c.ClassDruid,(t=>[e.SpecFeralDruid,e.SpecFeralTankDruid].includes(t.spec)))}]}]},{label:"Mitigation Debuffs",categories:[{label:"Atk Pwr",effects:[{label:"Vindication",actionId:H.fromSpellId(26016),playerData:ye(c.ClassPaladin,"vindication",(t=>[e.SpecRetributionPaladin,e.SpecProtectionPaladin].includes(t.spec)))},{label:"Improved Demoralizing Shout",actionId:H.fromSpellId(12879),playerData:ye(c.ClassWarrior,"improvedDemoralizingShout")},{label:"Demoralizing Shout",actionId:H.fromSpellId(11556),playerData:Ie(c.ClassWarrior,"improvedDemoralizingShout")},{label:"Improved Demoralizing Roar",actionId:H.fromSpellId(16862),playerData:Ee(e.SpecFeralTankDruid,"feralAggression",(t=>t.getSimpleRotation().maintainDemoralizingRoar))},{label:"Demoralizing Roar",actionId:H.fromSpellId(9898),playerData:(De=e.SpecFeralTankDruid,ke="feralAggression",ve=t=>t.getSimpleRotation().maintainDemoralizingRoar,Pe(De,ke,!0,ve))},{label:"Demoralizing Screech",actionId:H.fromSpellId(55487),playerData:ge(c.ClassHunter,(t=>t.getSpecOptions().petType==$.CarrionBird))}]},{label:"Atk Speed",effects:[{label:"Improved Thunder Clap",actionId:H.fromSpellId(12666),playerData:ye(c.ClassWarrior,"improvedThunderClap")},{label:"Thunder Clap",actionId:H.fromSpellId(47502),playerData:Ie(c.ClassWarrior,"improvedThunderClap")}]},{label:"Miss",effects:[{label:"Insect Swarm",actionId:H.fromSpellId(24977),playerData:Ee(e.SpecBalanceDruid,"insectSwarm")},{label:"Scorpid Sting",actionId:H.fromSpellId(3043),playerData:ge(c.ClassHunter,(t=>t.getSimpleRotation().sting==j.ScorpidSting))}]}]}]};var De,ke,ve;class Ce extends gt{constructor(t,e){super(t,e,{identifier:"raid-tab",title:"Raid"}),this.simUI=e,this.rootElem.classList.add("active","show"),this.leftPanel=document.createElement("div"),this.leftPanel.classList.add("raid-tab-left","tab-panel-left"),this.rightPanel=document.createElement("div"),this.rightPanel.classList.add("raid-tab-right","tab-panel-right"),this.contentContainer.appendChild(this.leftPanel),this.contentContainer.appendChild(this.rightPanel),this.buildTabContent()}buildTabContent(){this.simUI.raidPicker=new ne(this.leftPanel,this.simUI),new he(this.leftPanel,this.simUI);const t=new ft(this.rightPanel,this.simUI,{label:"Raid",header:{title:"Saved Raid Groups"},storageKey:this.simUI.getSavedRaidStorageKey(),getData:t=>G.create({raid:this.simUI.sim.raid.toProto(),blessings:this.simUI.blessingsPicker.getAssignments(),faction:this.simUI.sim.getFaction(),phase:this.simUI.sim.getPhase()}),setData:(t,e,a)=>{n.freezeAllAndDo((()=>{this.simUI.sim.raid.fromProto(t,a.raid||I.create()),this.simUI.blessingsPicker.setAssignments(t,a.blessings||K.create()),a.faction&&this.simUI.sim.setFaction(t,a.faction),a.phase&&this.simUI.sim.setPhase(t,a.phase)}))},changeEmitters:[this.simUI.changeEmitter,this.simUI.sim.changeEmitter],equals:(t,e)=>G.equals(t,e),toJson:t=>G.toJson(t),fromJson:t=>G.fromJson(t)});this.simUI.sim.waitForInit().then((()=>{t.loadUserData()}))}}class we extends _{constructor(t,e,a,s){super(t,"raid-target-picker-root",a,s),this.rootElem.classList.add("dropdown"),this.config=s,this.raid=e,this.curPlayer=this.raid.getPlayerFromUnitReference(s.getValue(a)),this.curUnitReference=this.getInputValue(),this.rootElem.innerHTML='\n\t\t\t<a\n\t\t\t\tclass="raid-target-picker-button"\n\t\t\t\thref="javascript:void(0)"\n\t\t\t\trole="button"\n\t\t\t\tdata-bs-toggle="dropdown"\n\t\t\t></a>\n\t\t\t<div class="dropdown-menu"></div>\n    ',this.buttonElem=this.rootElem.querySelector(".raid-target-picker-button"),this.dropdownElem=this.rootElem.querySelector(".dropdown-menu"),this.buttonElem.addEventListener("click",(t=>t.preventDefault())),this.currentOptions=[],this.updateOptions(n.nextEventID()),s.compChangeEmitter.on((t=>this.updateOptions(t))),this.init()}makeTargetOptions(){return[{player:null,isDropdown:!0},...this.raid.getPlayers().filter((t=>null!=t)).map((t=>({player:t,isDropdown:!0})))]}updateOptions(t){this.currentOptions=this.makeTargetOptions(),this.dropdownElem.innerHTML="",this.currentOptions.forEach((t=>this.dropdownElem.appendChild(this.makeOption(t))));const e=this.curUnitReference;this.curUnitReference=this.getInputValue(),C.equals(e,this.curUnitReference)?this.setInputValue(this.curUnitReference):this.inputChanged(t)}makeOption(t){const e=we.makeOptionElem(t);return e.addEventListener("click",(e=>{e.preventDefault(),this.curPlayer=t.player,this.curUnitReference=this.getInputValue(),this.inputChanged(n.nextEventID())})),e}getInputElem(){return this.buttonElem}getInputValue(){return this.curPlayer?this.curPlayer.makeUnitReference():X()}setInputValue(t){this.curUnitReference=C.clone(t),this.curPlayer=this.raid.getPlayerFromUnitReference(this.curUnitReference);const e=this.currentOptions.find((t=>t.player==this.curPlayer));e&&(this.buttonElem.innerHTML=we.makeOptionElem({player:e.player}).outerHTML)}static makeOptionElem(t){const e=t.player?x(t.player.getClass()):"";let a=document.createElement("fragment");return a.innerHTML=`\n\t\t\t<div class="player ${e?`bg-${e}-dampened`:""}">\n\t\t\t\t<div class="player-label">\n\t\t\t\t\t${t.player?`<img class="player-icon" src="${t.player.getSpecIcon()}" draggable="false"/>`:""}\n\t\t\t\t\t<div class="player-details">\n\t\t\t\t\t\t<span class="player-name ${e?`text-${e}`:""}">\n\t\t\t\t\t\t\t${t.player?t.player.getName():"Unassigned"}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`,t.isDropdown&&(a.innerHTML=`\n\t\t\t\t<a class="dropdown-option" href="javascript:void(0) role="button">${a.innerHTML}</a>\n\t\t\t`),a.children[0]}}class Te extends T{constructor(t,e){super(t,"assignments-picker-root"),this.changeEmitter=new n,this.raidSimUI=e,this.innervatesPicker=new Ue(this.rootElem,e),this.powerInfusionsPicker=new xe(this.rootElem,e)}}class Re extends T{constructor(t,e){super(t,"assigned-buff-picker-root"),this.changeEmitter=new n,this.raidSimUI=e,this.targetPickers=[],this.playersContainer=document.createElement("div"),this.playersContainer.classList.add("assigned-buff-container"),this.rootElem.appendChild(this.playersContainer),this.raidSimUI.changeEmitter.on((()=>this.update())),this.update()}update(){this.playersContainer.innerHTML=`\n\t\t\t<label class="assignmented-buff-label form-label">${this.getTitle()}</label>\n\t\t`;const t=this.getSourcePlayers();0==t.length?this.rootElem.classList.add("hide"):this.rootElem.classList.remove("hide"),this.targetPickers=t.map((t=>{const e=document.createElement("div");e.classList.add("assigned-buff-player","input-inline"),this.playersContainer.appendChild(e);const a=document.createElement("div");a.classList.add("raid-target-picker-root"),a.appendChild(we.makeOptionElem({player:t,isDropdown:!1})),e.appendChild(a);const s=document.createElement("i");s.classList.add("assigned-buff-arrow","fa","fa-arrow-right"),e.appendChild(s);const i=new we(e,this.raidSimUI.sim.raid,t,{extraCssClasses:["assigned-buff-target-picker"],noTargetLabel:"Unassigned",compChangeEmitter:this.raidSimUI.sim.raid.compChangeEmitter,changedEvent:t=>t.specOptionsChangeEmitter,getValue:t=>this.getPlayerValue(t),setValue:(t,e,a)=>this.setPlayerValue(t,e,a)}),r={player:t,targetPicker:i,targetPlayer:this.raidSimUI.sim.raid.getPlayerFromUnitReference(i.getInputValue())};return i.changeEmitter.on((t=>{r.targetPlayer=this.raidSimUI.sim.raid.getPlayerFromUnitReference(i.getInputValue())})),r}))}}class Ue extends Re{getTitle(){return"Innervate"}getSourcePlayers(){return this.raidSimUI.getActivePlayers().filter((t=>t.isClass(c.ClassDruid)))}getPlayerValue(t){return t.getSpecOptions().innervateTarget||X()}setPlayerValue(t,e,a){const s=e.getSpecOptions();s.innervateTarget=a,e.setSpecOptions(t,s)}}class xe extends Re{getTitle(){return"Power Infusion"}getSourcePlayers(){return this.raidSimUI.getActivePlayers().filter((t=>t.isClass(c.ClassPriest)&&t.getTalents().powerInfusion))}getPlayerValue(t){return t.getSpecOptions().powerInfusionTarget||X()}setPlayerValue(t,e,a){const s=e.getSpecOptions();s.powerInfusionTarget=a,e.setSpecOptions(t,s)}}class Le extends T{constructor(t,e){super(t,"blessings-picker-root"),this.changeEmitter=new n,this.pickers=[],this.simUI=e,this.assignments=K.clone(d(4));const s=a.filter((t=>Jt.includes(t))),i=[...Array(4).keys()];s.map((t=>{const e=document.createElement("div");e.classList.add("blessings-picker-row"),this.rootElem.appendChild(e),e.append(this.buildSpecIcon(t));const a=document.createElement("div");return a.classList.add("blessings-picker-container"),e.appendChild(a),i.forEach((e=>{this.pickers[e]||this.pickers.push([]);const s=new yt(a,this,{extraCssClasses:["blessing-picker"],numColumns:1,values:[{color:Q[c.ClassPaladin],value:Z.BlessingUnknown},{actionId:()=>H.fromSpellId(25898),value:Z.BlessingOfKings},{actionId:()=>H.fromSpellId(48934),value:Z.BlessingOfMight},{actionId:()=>H.fromSpellId(48938),value:Z.BlessingOfWisdom},{actionId:()=>H.fromSpellId(25899),value:Z.BlessingOfSanctuary}],equals:(t,e)=>t==e,zeroValue:Z.BlessingUnknown,enableWhen:t=>{const a=Math.min(this.simUI.getClassCount(c.ClassPaladin),4);return e<a},changedEvent:t=>t.changeEmitter,getValue:a=>a.assignments.paladins[e]?.blessings[t]||Z.BlessingUnknown,setValue:(a,s,i)=>{s.assignments.paladins[e].blessings[t]!=i&&(s.assignments.paladins[e].blessings[t]=i,this.changeEmitter.emit(a))}});this.pickers[e].push(s)})),e})),this.updatePickers(),this.simUI.compChangeEmitter.on((t=>this.updatePickers()))}updatePickers(){for(let t=0;t<4;t++)this.pickers[t].forEach((t=>t.update()))}buildSpecIcon(e){const a=document.createElement("fragment");a.innerHTML=`\n\t\t\t<div class="blessings-picker-spec">\n\t\t\t\t<img\n\t\t\t\t\tsrc="${Y[e]}"\n\t\t\t\t\tclass="blessings-spec-icon"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t`;const s=a.querySelector(".blessings-spec-icon");return t(s,{content:tt[e]}),a.children[0]}getAssignments(){return K.clone(this.assignments)}setAssignments(t,e){this.assignments=K.clone(e),this.changeEmitter.emit(t)}}class Ae extends T{constructor(t,e){super(t,"tanks-picker-root"),this.raidSimUI=e;const a=this.raidSimUI.sim.raid;for(let s=0;s<4;s++){const t=document.createElement("div");t.classList.add("tank-picker-row","input-inline"),this.rootElem.appendChild(t);const e=document.createElement("label");e.textContent=0==s?"Main Tank":`Tank ${s+1}`,e.classList.add("tank-picker-label","form-label"),t.appendChild(e),new we(t,a,a,{extraCssClasses:["tank-picker"],noTargetLabel:"Unassigned",compChangeEmitter:a.compChangeEmitter,changedEvent:t=>t.tanksChangeEmitter,getValue:t=>t.getTanks()[s]||X(),setValue:(t,e,a)=>{const i=e.getTanks();for(let r=0;r<s;r++)i[r]||i.push(X());i[s]=a,e.setTanks(t,i)}})}}}class Oe extends gt{constructor(t,e){super(t,e,{identifier:"raid-settings-tab",title:"Settings"}),this.column1=this.buildColumn(1,"raid-settings-col"),this.column2=this.buildColumn(2,"raid-settings-col"),this.column3=this.buildColumn(3,"raid-settings-col"),this.simUI=e,this.leftPanel=document.createElement("div"),this.leftPanel.classList.add("raid-settings-tab-left","tab-panel-left"),this.leftPanel.appendChild(this.column1),this.leftPanel.appendChild(this.column2),this.leftPanel.appendChild(this.column3),this.rightPanel=document.createElement("div"),this.rightPanel.classList.add("raid-settings-tab-right","tab-panel-right","within-raid-sim-hide"),this.contentContainer.appendChild(this.leftPanel),this.contentContainer.appendChild(this.rightPanel),this.buildTabContent()}buildTabContent(){this.buildEncounterSettings(),this.buildConsumesSettings(),this.buildOtherSettings(),this.buildTankSettings(),this.buildAssignmentSettings(),this.buildBlessingsPicker(),this.buildSavedDataPickers()}buildEncounterSettings(){const t=new It(this.column1,"encounter-settings",{header:{title:"Encounter"}});new Pt(t.bodyElement,this.simUI.sim.encounter,{showExecuteProportion:!0},this.simUI)}buildConsumesSettings(){const t=new It(this.column1,"consumes-settings",{header:{title:"Consumables"}}),e=document.createElement("div");e.classList.add("consumes-container"),t.bodyElement.appendChild(e),this.makeBooleanRaidIconBuffInput(e,H.fromItemId(37094),"scrollOfStamina"),this.makeBooleanRaidIconBuffInput(e,H.fromItemId(43466),"scrollOfStrength"),this.makeBooleanRaidIconBuffInput(e,H.fromItemId(43464),"scrollOfAgility"),this.makeBooleanRaidIconBuffInput(e,H.fromItemId(37092),"scrollOfIntellect"),this.makeBooleanRaidIconBuffInput(e,H.fromItemId(37098),"scrollOfSpirit"),this.makeBooleanRaidIconBuffInput(e,H.fromItemId(43468),"scrollOfProtection")}buildOtherSettings(){}buildTankSettings(){const t=new It(this.column2,"tanks-settings",{header:{title:"Tanks"}});new Ae(t.bodyElement,this.simUI)}buildAssignmentSettings(){const t=new It(this.column2,"assignments-settings",{header:{title:"External Buffs"}});new Te(t.bodyElement,this.simUI)}buildBlessingsPicker(){const t=new It(this.column3,"blessings-settings",{header:{title:"Blessings",tooltip:et}});this.simUI.blessingsPicker=new Le(t.bodyElement,this.simUI),this.simUI.blessingsPicker.changeEmitter.on((t=>this.simUI.changeEmitter.emit(t)))}buildSavedDataPickers(){const t=new ft(this.rightPanel,this.simUI.sim.encounter,{label:"Encounter",header:{title:"Saved Encounters"},storageKey:this.simUI.getSavedEncounterStorageKey(),getData:t=>at.create({encounter:t.toProto()}),setData:(t,e,a)=>e.fromProto(t,a.encounter),changeEmitters:[this.simUI.sim.encounter.changeEmitter],equals:(t,e)=>at.equals(t,e),toJson:t=>at.toJson(t),fromJson:t=>at.fromJson(t)});this.simUI.sim.waitForInit().then((()=>{t.loadUserData()}))}makeBooleanRaidIconBuffInput(t,e,a){const s=this.simUI.sim.raid;return new Et(t,s,{actionId:()=>e,states:2,changedEvent:t=>t.buffsChangeEmitter,getValue:t=>t.getBuffs()[a],setValue:(t,e,s)=>{const i=e.getBuffs();i[a]=s,e.setBuffs(t,i)}})}}const Be=[];new class extends St{constructor(t,e){super(t,new bt,{cssClass:"raid-sim-ui",cssScheme:"raid",spec:null,simStatus:Dt,knownIssues:(e.knownIssues||[]).concat(Be)}),this.raidSimResultsManager=null,this.raidPicker=null,this.blessingsPicker=null,this.compChangeEmitter=new n,this.changeEmitter=new n,this.referenceChangeEmitter=new n,this.config=e,this.sim.raid.compChangeEmitter.on((t=>this.compChangeEmitter.emit(t))),[this.compChangeEmitter,this.sim.changeEmitter].forEach((t=>t.on((t=>this.changeEmitter.emit(t))))),this.changeEmitter.on((()=>this.recomputeSettingsLayout())),this.sim.setModifyRaidProto((t=>this.modifyRaidProto(t))),this.sim.waitForInit().then((()=>this.loadSettings())),this.addSidebarComponents(),this.addTopbarComponents(),this.addRaidTab(),this.addSettingsTab(),this.addDetailedResultsTab()}loadSettings(){const t=n.nextEventID();n.freezeAllAndDo((()=>{let e=!1;const a=window.localStorage.getItem(this.getSettingsStorageKey());if(null!=a)try{const i=s.fromJsonString(a);this.fromProto(t,i),e=!0}catch(i){console.warn("Failed to parse saved settings: "+i)}e||this.applyDefaults(t),this.changeEmitter.on((t=>{const e=s.toJsonString(this.toProto());window.localStorage.setItem(this.getSettingsStorageKey(),e)}))}))}addSidebarComponents(){this.raidSimResultsManager=st(this),this.raidSimResultsManager.changeEmitter.on((t=>this.referenceChangeEmitter.emit(t)))}addTopbarComponents(){this.simHeader.addImportLink("JSON",new Xt(this.rootElem,this)),this.simHeader.addImportLink("WCL",new ie(this.rootElem,this)),this.simHeader.addExportLink("JSON",new Kt(this.rootElem,this))}addRaidTab(){new Ce(this.simTabContentsContainer,this)}addSettingsTab(){new Oe(this.simTabContentsContainer,this)}addDetailedResultsTab(){this.addTab("Results","detailed-results-tab",'\n\t\t\t<div class="detailed-results">\n\t\t\t</div>\n\t\t'),new it(this.rootElem.getElementsByClassName("detailed-results")[0],this,this.raidSimResultsManager)}recomputeSettingsLayout(){window.dispatchEvent(new Event("resize"))}modifyRaidProto(t){const e=this.getClassCount(c.ClassPaladin),a=this.blessingsPicker.getAssignments();Jt.forEach((s=>{const i=t.parties.map((t=>t.players.filter((t=>t.class!=c.ClassUnknown&&b(t)==s)))).flat();a.paladins.forEach(((t,a)=>{a>=e||(t.blessings[s]==Z.BlessingOfKings?i.forEach((t=>t.buffs.blessingOfKings=!0)):t.blessings[s]==Z.BlessingOfMight?i.forEach((t=>t.buffs.blessingOfMight=rt.TristateEffectImproved)):t.blessings[s]==Z.BlessingOfWisdom?i.forEach((t=>t.buffs.blessingOfWisdom=rt.TristateEffectImproved)):t.blessings[s]==Z.BlessingOfSanctuary&&i.forEach((t=>t.buffs.blessingOfSanctuary=!0)))}))}))}getCurrentData(){return this.raidSimResultsManager?this.raidSimResultsManager.getCurrentData():null}getReferenceData(){return this.raidSimResultsManager?this.raidSimResultsManager.getReferenceData():null}getActivePlayers(){return this.sim.raid.getActivePlayers()}getClassCount(t){return this.getActivePlayers().filter((e=>e.isClass(t))).length}applyDefaults(t){n.freezeAllAndDo((()=>{this.sim.raid.fromProto(t,I.create({numActiveParties:5})),this.sim.setPhase(t,1),this.sim.encounter.applyDefaults(t),this.sim.applyDefaults(t,!0,!0),this.sim.setShowDamageMetrics(t,!0)}))}toProto(){return s.create({settings:this.sim.toProto(),raid:this.sim.raid.toProto(!0),blessings:this.blessingsPicker.getAssignments(),encounter:this.sim.encounter.toProto()})}toLink(){const t=this.toProto();t.settings=void 0;const e=s.toBinary(t),a=kt.deflate(e,{to:"string"}),i=btoa(String.fromCharCode(...a)),r=new URL(window.location.href);return r.hash=i,r.toString()}fromProto(t,e){n.freezeAllAndDo((()=>{e.settings&&this.sim.fromProto(t,e.settings),this.sim.raid.fromProto(t,e.raid||I.create()),this.sim.encounter.fromProto(t,e.encounter||y.create()),this.blessingsPicker.setAssignments(t,e.blessings||K.create())}))}clearRaid(t){this.sim.raid.clear(t)}getStorageKey(t){return"__classic_raid__"+t}getSavedRaidStorageKey(){return this.getStorageKey("__savedRaid__")}}(document.body,{});
