export declare function equalsOrBothNull<T>(a: T, b: T, comparator?: (_a: NonNullable<T>, _b: NonNullable<T>) => boolean): boolean;
export declare function stringComparator(a: string, b: string): number;
export declare function sum(arr: Array<number>): number;
export declare function maxIndex(arr: Array<number>): number | null;
export declare function swap<T>(arr: Array<T>, i: number, j: number): void;
export declare function arrayEquals<T>(a: Array<T>, b: Array<T>, comparator?: (a: T, b: T) => boolean): boolean;
export declare function intersection<T>(a: Array<T>, b: Array<T>): Array<T>;
export declare function distinct<T>(arr: Array<T>, comparator?: (a: T, b: T) => boolean): Array<T>;
export declare function bucket<T>(arr: Array<T>, toString: (val: T) => string): Record<string, Array<T>>;
export declare function stDevToConf90(stDev: number, N: number): number;
export declare function wait(ms: number): Promise<void>;
export declare function getEnumValues<E>(enumType: any): Array<E>;
export declare function isRightClick(event: MouseEvent): boolean;
export declare function hexToRgba(hex: string, alpha: number): string;
export declare function camelToSnakeCase(str: string): string;
export declare function downloadJson(json: any, fileName: string): void;
export declare function downloadString(data: string, fileName: string): void;
export declare function formatDeltaTextElem(elem: HTMLElement, before: number, after: number, precision: number): void;
