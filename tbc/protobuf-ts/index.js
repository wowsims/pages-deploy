// Public API of the protobuf-ts runtime.
// Note: we do not use `export * from ...` to help tree shakers,
// webpack verbose output hints that this should be useful
// Convenience JSON typings and corresponding type guards
export { typeofJsonValue, isJsonObject } from './json-typings.js';
// Base 64 encoding
export { base64decode, base64encode } from './base64.js';
// UTF8 encoding
export { utf8read } from './protobufjs-utf8.js';
// Binary format contracts, options for reading and writing, for example
export { WireType, binaryWriteOptions, binaryReadOptions, mergeBinaryOptions, UnknownFieldHandler, } from './binary-format-contract.js';
// Standard IBinaryReader implementation
export { BinaryReader } from './binary-reader.js';
// Standard IBinaryWriter implementation
export { BinaryWriter } from './binary-writer.js';
// Int64 and UInt64 implementations required for the binary format
export { PbLong, PbULong } from './pb-long.js';
// JSON format contracts, options for reading and writing, for example
export { jsonReadOptions, jsonWriteOptions, mergeJsonOptions } from './json-format-contract.js';
// Message type contract
export { MESSAGE_TYPE } from './message-type-contract.js';
// Message type implementation via reflection
export { MessageType } from './message-type.js';
// Reflection info, generated by the plugin, exposed to the user, used by reflection ops
export { ScalarType, LongType, RepeatType, normalizeFieldInfo, readFieldOptions, readFieldOption, readMessageOption } from './reflection-info.js';
// Message operations via reflection
export { ReflectionTypeCheck } from './reflection-type-check.js';
export { reflectionCreate } from './reflection-create.js';
export { reflectionScalarDefault } from './reflection-scalar-default.js';
export { reflectionMergePartial } from './reflection-merge-partial.js';
export { reflectionEquals } from './reflection-equals.js';
export { ReflectionBinaryReader } from './reflection-binary-reader.js';
export { ReflectionBinaryWriter } from './reflection-binary-writer.js';
export { ReflectionJsonReader } from './reflection-json-reader.js';
export { ReflectionJsonWriter } from './reflection-json-writer.js';
export { containsMessageType } from './reflection-contains-message-type.js';
// Oneof helpers
export { isOneofGroup, setOneofValue, getOneofValue, clearOneofValue, getSelectedOneofValue } from './oneof.js';
// Enum object type guard and reflection util, may be interesting to the user.
export { listEnumValues, listEnumNames, listEnumNumbers, isEnumObject } from './enum-object.js';
// lowerCamelCase() is exported for plugin, rpc-runtime and other rpc packages
export { lowerCamelCase } from './lower-camel-case.js';
// assertion functions are exported for plugin, may also be useful to user
export { assert, assertNever, assertInt32, assertUInt32, assertFloat32 } from './assert.js';
